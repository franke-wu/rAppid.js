{
    "methods": [
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/EventDispatcher.js",
            "lineNumbers": [
                201,
                203
            ],
            "definedBy": "js.core.EventDispatcher",
            "name": "_beforeDestroy",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Binding.js",
            "lineNumbers": [
                352,
                369
            ],
            "description": "This method is called, when the value of the current binding changes.\nIt recreates the the subBinding and triggers the binding",
            "private": "",
            "name": "_callback",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": null,
                    "name": "event",
                    "optional": false
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Binding.js",
            "lineNumbers": [
                334,
                346
            ],
            "description": "This method is called, when the a change event of an function binding is triggered\n",
            "private": "",
            "name": "_changeCallback",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Binding.js",
            "lineNumbers": [
                247,
                282
            ],
            "name": "_checkAttributes",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Binding.js",
            "lineNumbers": [
                283,
                318
            ],
            "name": "_createSubBinding",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "Function"
                    ],
                    "name": "fnc",
                    "optional": false
                },
                {
                    "types": [
                        "String"
                    ],
                    "name": "cacheId",
                    "optional": true
                },
                {
                    "types": [
                        "Number"
                    ],
                    "name": "delay",
                    "optional": true
                },
                {
                    "types": [
                        "Object"
                    ],
                    "name": "scope",
                    "optional": true
                },
                {
                    "types": [
                        "Array"
                    ],
                    "name": "parameters",
                    "optional": true
                },
                {
                    "types": [
                        "String"
                    ],
                    "name": "strategy",
                    "optional": true,
                    "defaultValue": "loop",
                    "description": "loop will trigger the function at least every delay, wait will clear the timeout"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Base.js",
            "lineNumbers": [
                84,
                118
            ],
            "description": "",
            "private": "",
            "definedBy": "js.core.Base",
            "name": "_debounceFunctionCall",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/EventDispatcher.js",
            "lineNumbers": [
                209,
                215
            ],
            "definedBy": "js.core.EventDispatcher",
            "name": "_destroyCompleted",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "scope"
                },
                {
                    "name": "fnc"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Binding.js",
            "lineNumbers": [
                219,
                245
            ],
            "name": "_getEventsForFnc",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Binding.js",
            "lineNumbers": [
                421,
                431
            ],
            "description": "Returns an array with values of all function parameters",
            "returns": {
                "types": [
                    "Array"
                ]
            },
            "private": "",
            "name": "_getFncParameters",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "scope"
                },
                {
                    "name": "fnc"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Binding.js",
            "lineNumbers": [
                193,
                217
            ],
            "name": "_getOnChangeAttributesForFnc",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "scope"
                },
                {
                    "name": "fnc"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Binding.js",
            "lineNumbers": [
                178,
                191
            ],
            "name": "_getOnChangePathsForFnc",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Binding.js",
            "lineNumbers": [
                374,
                415
            ],
            "description": "Unbinds all events and destroys subBinding...",
            "definedBy": "js.core.EventDispatcher",
            "overwritesMethod": true,
            "name": "_innerDestroy",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "e"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Binding.js",
            "lineNumbers": [
                319,
                327
            ],
            "name": "_revCallback",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "js.core.Bindable"
                    ],
                    "name": "targetScope",
                    "optional": false
                },
                {
                    "types": [
                        "String",
                        "Function"
                    ],
                    "name": "key",
                    "optional": false
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Binding.js",
            "lineNumbers": [
                511,
                520
            ],
            "description": "",
            "name": "addTarget",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String"
                    ],
                    "name": "eventType",
                    "optional": false,
                    "description": "The name of the event"
                },
                {
                    "name": "callback"
                },
                {
                    "types": [
                        "Object"
                    ],
                    "name": "scope",
                    "optional": true,
                    "description": "This sets the scope for the callback function"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/EventDispatcher.js",
            "lineNumbers": [
                72,
                88
            ],
            "description": "Binds a callback and a scope to a given eventType\n",
            "definedBy": "js.core.EventDispatcher",
            "name": "bind",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "bindingDef"
                },
                {
                    "name": "target"
                },
                {
                    "name": "callback"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Binding.js",
            "lineNumbers": [
                542,
                568
            ],
            "name": "create",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "attributes"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Binding.js",
            "lineNumbers": [
                38,
                52
            ],
            "definedBy": "js.core.Base",
            "overwritesMethod": true,
            "name": "ctor",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/EventDispatcher.js",
            "lineNumbers": [
                188,
                199
            ],
            "description": "Clears up the instance",
            "definedBy": "js.core.EventDispatcher",
            "name": "destroy",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Base.js",
            "lineNumbers": [
                41,
                43
            ],
            "description": "this is an empty function doing nothing. It can be used as fallback if a method requires a\ncallback function, which hasn't been passed.\n\n```\nfunction myFunction(callback) {\ncallback = callback || this.emptyCallback;\n}\n```\n",
            "returns": {
                "types": [
                    "Function"
                ],
                "description": "a function doing nothing"
            },
            "definedBy": "js.core.Base",
            "name": "emptyCallback",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Binding.js",
            "lineNumbers": [
                470,
                476
            ],
            "description": "Returns the value in the context of the surrounding bindings",
            "returns": {
                "types": [
                    "*"
                ]
            },
            "name": "getContextValue",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Binding.js",
            "lineNumbers": [
                502,
                504
            ],
            "name": "getTargets",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Binding.js",
            "lineNumbers": [
                436,
                460
            ],
            "description": "Returns the transformed value of the binding or null, if the binding path is not present",
            "returns": {
                "types": [
                    "*"
                ]
            },
            "name": "getValue",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Binding.js",
            "lineNumbers": [
                62,
                176
            ],
            "name": "initialize",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Binding.js",
            "lineNumbers": [
                462,
                464
            ],
            "name": "invalidateValueCache",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String",
                        "Array"
                    ],
                    "name": "message",
                    "optional": false,
                    "description": "the message to log"
                },
                {
                    "types": [
                        "String"
                    ],
                    "name": "level",
                    "optional": true,
                    "defaultValue": "\"info\"",
                    "description": "the service level of (debug, info, warn, error)"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Base.js",
            "lineNumbers": [
                51,
                72
            ],
            "description": "logs messages to configured logging functions\n",
            "definedBy": "js.core.Base",
            "name": "log",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "js.core.Bindable"
                    ],
                    "name": "targetScope",
                    "optional": false
                },
                {
                    "types": [
                        "String",
                        "Function"
                    ],
                    "name": "key",
                    "optional": false
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Binding.js",
            "lineNumbers": [
                526,
                540
            ],
            "description": "",
            "name": "removeTarget",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Base.js",
            "lineNumbers": [
                25,
                27
            ],
            "description": "determinate if the application runs in the browser or on node\n",
            "returns": {
                "types": [
                    "Boolean"
                ],
                "description": "true if the application runs in a browser"
            },
            "definedBy": "js.core.Base",
            "name": "runsInBrowser",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": null,
                    "name": "fnc",
                    "optional": false,
                    "description": "the function to synchronize"
                },
                {
                    "types": null,
                    "name": "cacheId",
                    "optional": false,
                    "description": "the cacheId for the fnc call"
                },
                {
                    "types": null,
                    "name": "callback",
                    "optional": false,
                    "description": "the callback to be called in the fnc"
                },
                {
                    "types": null,
                    "name": "scope",
                    "optional": false,
                    "description": "the fnc scope"
                },
                {
                    "types": null,
                    "name": "clear",
                    "optional": false,
                    "description": "if you want to clear the cache after all callbacks are called"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Base.js",
            "lineNumbers": [
                127,
                167
            ],
            "description": "",
            "definedBy": "js.core.Base",
            "name": "synchronizeFunctionCall",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Binding.js",
            "lineNumbers": [
                498,
                500
            ],
            "name": "toString",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "val"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Binding.js",
            "lineNumbers": [
                54,
                56
            ],
            "name": "transform",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "val"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Binding.js",
            "lineNumbers": [
                58,
                60
            ],
            "name": "transformBack",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String"
                    ],
                    "name": "eventType",
                    "optional": false
                },
                {
                    "types": [
                        "EventDispatcher.Event",
                        "Object"
                    ],
                    "name": "event",
                    "optional": false,
                    "description": "If you use an Object the object is wrapped in an Event"
                },
                {
                    "types": null,
                    "name": "target",
                    "optional": false
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/EventDispatcher.js",
            "lineNumbers": [
                97,
                160
            ],
            "description": "Triggers a specific event and the * event\n",
            "definedBy": "js.core.EventDispatcher",
            "name": "trigger",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Binding.js",
            "lineNumbers": [
                480,
                497
            ],
            "description": "This method triggers the binding and syncs the target with the scope",
            "name": "triggerBinding",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String"
                    ],
                    "name": "eventType",
                    "optional": false
                },
                {
                    "types": [
                        "Function"
                    ],
                    "name": "callback",
                    "optional": false
                },
                {
                    "name": "scope"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/EventDispatcher.js",
            "lineNumbers": [
                168,
                183
            ],
            "description": "Unbinds callbacks for events\n",
            "definedBy": "js.core.EventDispatcher",
            "name": "unbind",
            "visibility": "public"
        }
    ],
    "staticMethods": [],
    "defaults": {
        "event": {
            "name": "event",
            "defaultType": "value",
            "visibility": "public",
            "value": "change",
            "lineNumbers": [
                33,
                33
            ]
        },
        "path": {
            "name": "path",
            "defaultType": "value",
            "visibility": "public",
            "value": null,
            "lineNumbers": [
                34,
                34
            ]
        },
        "twoWay": {
            "name": "twoWay",
            "defaultType": "value",
            "visibility": "public",
            "value": false,
            "lineNumbers": [
                35,
                35
            ]
        }
    },
    "properties": {},
    "fqClassName": "js.core.Binding",
    "inherit": "js.core.EventDispatcher",
    "dependencies": [
        "js.core.EventDispatcher",
        "js.lib.parser",
        "underscore"
    ],
    "description": "Returns false if path includes function",
    "type": "js",
    "file": "js/core/Binding.js",
    "package": "js.core",
    "inheritancePath": [
        "js.core.EventDispatcher",
        "js.core.Base"
    ]
}