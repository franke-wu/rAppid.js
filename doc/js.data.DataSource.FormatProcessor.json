{
    "methods": [
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "Function"
                    ],
                    "name": "fnc",
                    "optional": false
                },
                {
                    "types": [
                        "String"
                    ],
                    "name": "cacheId",
                    "optional": true
                },
                {
                    "types": [
                        "Number"
                    ],
                    "name": "delay",
                    "optional": true
                },
                {
                    "types": [
                        "Object"
                    ],
                    "name": "scope",
                    "optional": true
                },
                {
                    "types": [
                        "Array"
                    ],
                    "name": "parameters",
                    "optional": true
                },
                {
                    "types": [
                        "String"
                    ],
                    "name": "strategy",
                    "optional": true,
                    "defaultValue": "loop",
                    "description": "loop will trigger the function at least every delay, wait will clear the timeout"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Base.js",
            "lineNumbers": [
                84,
                118
            ],
            "description": "",
            "private": "",
            "definedBy": "js.core.Base",
            "name": "_debounceFunctionCall",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Base.js",
            "lineNumbers": [
                12,
                18
            ],
            "definedBy": "js.core.Base",
            "name": "ctor",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "responses"
                }
            ],
            "annotations": {},
            "definedInFile": "js/data/DataSource.js",
            "lineNumbers": [
                1114,
                1116
            ],
            "name": "deserialize",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Base.js",
            "lineNumbers": [
                41,
                43
            ],
            "description": "this is an empty function doing nothing. It can be used as fallback if a method requires a\ncallback function, which hasn't been passed.\n\n```\nfunction myFunction(callback) {\ncallback = callback || this.emptyCallback;\n}\n```\n",
            "returns": {
                "types": [
                    "Function"
                ],
                "description": "a function doing nothing"
            },
            "definedBy": "js.core.Base",
            "name": "emptyCallback",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/data/DataSource.js",
            "lineNumbers": [
                1117,
                1119
            ],
            "name": "getContentType",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String",
                        "Array"
                    ],
                    "name": "message",
                    "optional": false,
                    "description": "the message to log"
                },
                {
                    "types": [
                        "String"
                    ],
                    "name": "level",
                    "optional": true,
                    "defaultValue": "\"info\"",
                    "description": "the service level of (debug, info, warn, error)"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Base.js",
            "lineNumbers": [
                51,
                72
            ],
            "description": "logs messages to configured logging functions\n",
            "definedBy": "js.core.Base",
            "name": "log",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Base.js",
            "lineNumbers": [
                25,
                27
            ],
            "description": "determinate if the application runs in the browser or on node\n",
            "returns": {
                "types": [
                    "Boolean"
                ],
                "description": "true if the application runs in a browser"
            },
            "definedBy": "js.core.Base",
            "name": "runsInBrowser",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "data"
                }
            ],
            "annotations": {},
            "definedInFile": "js/data/DataSource.js",
            "lineNumbers": [
                1111,
                1113
            ],
            "name": "serialize",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": null,
                    "name": "fnc",
                    "optional": false,
                    "description": "the function to synchronize"
                },
                {
                    "types": null,
                    "name": "cacheId",
                    "optional": false,
                    "description": "the cacheId for the fnc call"
                },
                {
                    "types": null,
                    "name": "callback",
                    "optional": false,
                    "description": "the callback to be called in the fnc"
                },
                {
                    "types": null,
                    "name": "scope",
                    "optional": false,
                    "description": "the fnc scope"
                },
                {
                    "types": null,
                    "name": "clear",
                    "optional": false,
                    "description": "if you want to clear the cache after all callbacks are called"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Base.js",
            "lineNumbers": [
                127,
                167
            ],
            "description": "",
            "definedBy": "js.core.Base",
            "name": "synchronizeFunctionCall",
            "visibility": "public"
        }
    ],
    "staticMethods": [],
    "defaults": {},
    "properties": {},
    "fqClassName": "js.data.DataSource.FormatProcessor",
    "inherit": "js.core.Base",
    "dependencies": [
        "JSON",
        "flow",
        "js.conf.DataSourceConfiguration",
        "js.conf.ResourceConfiguration",
        "js.core.Base",
        "js.core.Component",
        "js.core.List",
        "js.data.Collection",
        "js.data.Entity",
        "js.data.Model",
        "js.data.TypeResolver",
        "moment",
        "underscore"
    ],
    "type": "js",
    "file": "js/data/DataSource.js",
    "package": "js.data",
    "inheritancePath": [
        "js.core.Base"
    ]
}