{
    "methods": [
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Component.js",
            "lineNumbers": [
                94,
                96
            ],
            "description": "Returns the ENVIRONMENT object",
            "returns": {
                "types": [
                    "js.core.Bindable"
                ]
            },
            "definedBy": "js.core.Component",
            "name": "ENV",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Component.js",
            "lineNumbers": [
                102,
                104
            ],
            "description": "Returns the start parameter of the application",
            "returns": {
                "types": [
                    "Object"
                ]
            },
            "definedBy": "js.core.Component",
            "name": "PARAMETER",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "config"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Component.js",
            "lineNumbers": [
                203,
                205
            ],
            "definedBy": "js.core.Component",
            "name": "_addConfiguration",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "template"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Component.js",
            "lineNumbers": [
                196,
                201
            ],
            "definedBy": "js.core.Component",
            "name": "_addTemplate",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/EventDispatcher.js",
            "lineNumbers": [
                201,
                203
            ],
            "definedBy": "js.core.EventDispatcher",
            "name": "_beforeDestroy",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                314,
                338
            ],
            "definedBy": "js.core.Bindable",
            "name": "_bindBus",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "el"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/DomElement.js",
            "lineNumbers": [
                335,
                342
            ],
            "definedBy": "js.core.DomElement",
            "name": "_bindDomEvents",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "child"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/DomElement.js",
            "lineNumbers": [
                436,
                463
            ],
            "definedBy": "js.core.DomElement",
            "name": "_calculationAnimationDuration",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Component.js",
            "lineNumbers": [
                558,
                560
            ],
            "private": "This method is called after all children are initialized",
            "definedBy": "js.core.Component",
            "name": "_childrenInitialized",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "desc"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Component.js",
            "lineNumbers": [
                370,
                387
            ],
            "definedBy": "js.core.Component",
            "name": "_cleanUpDescriptor",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/DomElement.js",
            "lineNumbers": [
                547,
                556
            ],
            "definedBy": "js.core.DomElement",
            "name": "_clearRenderedChildren",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": null,
                    "name": "attribute",
                    "optional": false
                },
                {
                    "types": null,
                    "name": "key",
                    "optional": false
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                568,
                594
            ],
            "description": "Returns a copy of the attribute. This method is a hook for further cloning options",
            "private": "",
            "definedBy": "js.core.Bindable",
            "name": "_cloneAttribute",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "Object"
                    ],
                    "name": "attributes",
                    "optional": false,
                    "description": "contains the changed attributes"
                },
                {
                    "types": [
                        "Object"
                    ],
                    "name": "options",
                    "optional": false,
                    "description": "the options passed in the set method"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                862,
                864
            ],
            "description": "called after attributes has set and some of the has been changed\n",
            "abstract": "",
            "private": "",
            "definedBy": "js.core.Bindable",
            "name": "_commitChangedAttributes",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                756,
                759
            ],
            "definedBy": "js.core.Bindable",
            "name": "_commitInvalidatedAttributes",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "DOM"
                    ],
                    "name": "node",
                    "optional": false
                },
                {
                    "types": null,
                    "name": "attributes",
                    "optional": true,
                    "description": "for new Component"
                },
                {
                    "types": null,
                    "name": "rootScope",
                    "optional": false
                },
                {
                    "name": "cidScope"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Component.js",
            "lineNumbers": [
                463,
                497
            ],
            "description": "Create {@link Component} for DOM Node with given attributes",
            "definedBy": "js.core.Component",
            "name": "_createComponentForNode",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "type"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/DomElement.js",
            "lineNumbers": [
                803,
                808
            ],
            "definedBy": "js.core.DomElement",
            "name": "_createDOMEventHandler",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "tagName"
                },
                {
                    "name": "namespace"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/DomElement.js",
            "lineNumbers": [
                327,
                333
            ],
            "definedBy": "js.core.DomElement",
            "name": "_createDomElement",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "node"
                },
                {
                    "name": "rootScope"
                },
                {
                    "name": "cidScope"
                },
                {
                    "name": "attributes"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Component.js",
            "lineNumbers": [
                522,
                530
            ],
            "definedBy": "js.core.Component",
            "name": "_createTextElement",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "Function"
                    ],
                    "name": "fnc",
                    "optional": false
                },
                {
                    "types": [
                        "String"
                    ],
                    "name": "cacheId",
                    "optional": true
                },
                {
                    "types": [
                        "Number"
                    ],
                    "name": "delay",
                    "optional": true
                },
                {
                    "types": [
                        "Object"
                    ],
                    "name": "scope",
                    "optional": true
                },
                {
                    "types": [
                        "Array"
                    ],
                    "name": "parameters",
                    "optional": true
                },
                {
                    "types": [
                        "String"
                    ],
                    "name": "strategy",
                    "optional": true,
                    "defaultValue": "loop",
                    "description": "loop will trigger the function at least every delay, wait will clear the timeout"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Base.js",
            "lineNumbers": [
                84,
                118
            ],
            "description": "",
            "private": "",
            "definedBy": "js.core.Base",
            "name": "_debounceFunctionCall",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                600,
                602
            ],
            "description": "",
            "returns": {
                "types": [
                    "Object"
                ],
                "description": "returns the default attributes and includes the defaults from base classes"
            },
            "private": "",
            "definedBy": "js.core.Bindable",
            "name": "_defaultAttributes",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/EventDispatcher.js",
            "lineNumbers": [
                209,
                215
            ],
            "definedBy": "js.core.EventDispatcher",
            "name": "_destroyCompleted",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                364,
                378
            ],
            "definedBy": "js.core.Bindable",
            "name": "_extract",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String"
                    ],
                    "name": "property",
                    "optional": false,
                    "description": "the name of the static property used to find defaults"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                611,
                639
            ],
            "description": "generates a default chain containing the values from this instance and base classes\n",
            "returns": {
                "types": [
                    "*"
                ]
            },
            "private": "",
            "definedBy": "js.core.Bindable",
            "name": "_generateDefaultsChain",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "descriptor"
                },
                {
                    "name": "rootScope"
                },
                {
                    "name": "cidScope"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Element.js",
            "lineNumbers": [
                67,
                124
            ],
            "definedBy": "js.core.Element",
            "name": "_getAttributesFromDescriptor",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/ui/TextWrapper.js",
            "lineNumbers": [
                31,
                33
            ],
            "definedBy": "js.core.Component",
            "overwritesMethod": true,
            "name": "_getChildrenFromDescriptor",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "eventDefinition"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Component.js",
            "lineNumbers": [
                402,
                404
            ],
            "definedBy": "js.core.Component",
            "name": "_getEventName",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "eventName"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Component.js",
            "lineNumbers": [
                419,
                422
            ],
            "definedBy": "js.core.Component",
            "name": "_getEventTypeForAttribute",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/DomElement.js",
            "lineNumbers": [
                1003,
                1011
            ],
            "definedBy": "js.core.DomElement",
            "name": "_getHtmlTag",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "placeHolder"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/DomElement.js",
            "lineNumbers": [
                558,
                570
            ],
            "definedBy": "js.core.DomElement",
            "name": "_getIndexOfPlaceHolder",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "node"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Element.js",
            "lineNumbers": [
                125,
                127
            ],
            "definedBy": "js.core.Element",
            "name": "_getLocalNameFromNode",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "child"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/DomElement.js",
            "lineNumbers": [
                786,
                802
            ],
            "definedBy": "js.core.DomElement",
            "name": "_getNextVisibleChild",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "index"
                }
            ],
            "annotations": {},
            "definedInFile": "js/ui/TextWrapper.js",
            "lineNumbers": [
                41,
                54
            ],
            "name": "_getNodeForIndex",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "desc"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Element.js",
            "lineNumbers": [
                206,
                219
            ],
            "definedBy": "js.core.Element",
            "name": "_getTextContentFromDescriptor",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "attributes"
                },
                {
                    "name": "search"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                866,
                875
            ],
            "definedBy": "js.core.Bindable",
            "name": "_hasAll",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "attributes"
                },
                {
                    "name": "search"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                877,
                886
            ],
            "definedBy": "js.core.Bindable",
            "name": "_hasSome",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                439,
                450
            ],
            "definedBy": "js.core.Bindable",
            "name": "_initializationComplete",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                216,
                226
            ],
            "description": "starts the initialization of the `Bindable` if it hasn't initialized yet.\n\nIt calls the following methods:\n\n* initialize();\n* _initializeBindings();\n",
            "private": "",
            "definedBy": "js.core.Bindable",
            "name": "_initialize",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": null,
                    "name": "attributes",
                    "optional": false
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Element.js",
            "lineNumbers": [
                151,
                152
            ],
            "description": "initializes the attributes",
            "private": "",
            "definedBy": "js.core.Element",
            "name": "_initializeAttributes",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                383,
                433
            ],
            "description": "Initialize all Binding and Event attributes",
            "definedBy": "js.core.Bindable",
            "name": "_initializeBindings",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                435,
                437
            ],
            "definedBy": "js.core.Bindable",
            "name": "_initializeBindingsBeforeComplete",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "childComponents"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Component.js",
            "lineNumbers": [
                224,
                229
            ],
            "definedBy": "js.core.Component",
            "name": "_initializeChildren",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Element.js",
            "lineNumbers": [
                154,
                155
            ],
            "definedBy": "js.core.Element",
            "name": "_initializeDescriptors",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": null,
                    "name": "attributes",
                    "optional": false
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Element.js",
            "lineNumbers": [
                143,
                144
            ],
            "description": "initializes all attributes handling events\n",
            "private": "",
            "definedBy": "js.core.Element",
            "name": "_initializeEventAttributes",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                201,
                204
            ],
            "description": "\ninvokes the `_initialize` method. This method is a hook function and is overwritten by js.core.Component\n",
            "private": "",
            "definedBy": "js.core.Bindable",
            "name": "_initializeFromCtor",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "children"
                }
            ],
            "annotations": {},
            "definedInFile": "js/ui/View.js",
            "lineNumbers": [
                24,
                29
            ],
            "definedBy": "js.ui.View",
            "name": "_initializeLayoutChildren",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "el"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/DomElement.js",
            "lineNumbers": [
                344,
                346
            ],
            "definedBy": "js.core.DomElement",
            "name": "_initializeRenderer",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "attributes"
                },
                {
                    "name": "rootScope"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Component.js",
            "lineNumbers": [
                424,
                454
            ],
            "definedBy": "js.core.Component",
            "name": "_initializeXamlEventAttributes",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                276,
                311
            ],
            "definedBy": "js.core.Bindable",
            "name": "_inject",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                241,
                243
            ],
            "description": "\nreturns the chained object defining the required injections\n",
            "returns": {
                "types": [
                    "Object"
                ]
            },
            "private": "",
            "definedBy": "js.core.Bindable",
            "name": "_injectChain",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/EventDispatcher.js",
            "lineNumbers": [
                205,
                207
            ],
            "definedBy": "js.core.EventDispatcher",
            "name": "_innerDestroy",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "child"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/DomElement.js",
            "lineNumbers": [
                520,
                545
            ],
            "definedBy": "js.core.DomElement",
            "name": "_internalRemoveChild",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": null,
                    "name": "event",
                    "optional": false
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Component.js",
            "lineNumbers": [
                410,
                417
            ],
            "description": "Returns true if event is defined in Component event list",
            "definedBy": "js.core.Component",
            "name": "_isComponentEvent",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String"
                    ],
                    "name": "key",
                    "optional": false
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/DomElement.js",
            "lineNumbers": [
                625,
                649
            ],
            "description": "Returns wether a attribute key is a dom attribute or not\nTherefor it looks in the $classAttributes array.",
            "returns": {
                "types": [
                    "Boolean"
                ]
            },
            "private": "",
            "definedBy": "js.core.DomElement",
            "name": "_isDOMNodeAttribute",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "attributeName"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Component.js",
            "lineNumbers": [
                389,
                391
            ],
            "definedBy": "js.core.Component",
            "name": "_isEventAttribute",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "attributeName"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Component.js",
            "lineNumbers": [
                394,
                396
            ],
            "definedBy": "js.core.Component",
            "name": "_isFunctionAttribute",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "key"
                }
            ],
            "annotations": {},
            "definedInFile": "js/html/HtmlElement.js",
            "lineNumbers": [
                335,
                360
            ],
            "definedBy": "js.html.HtmlElement",
            "name": "_isStyleAttribute",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "attributeName"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Component.js",
            "lineNumbers": [
                398,
                400
            ],
            "definedBy": "js.core.Component",
            "name": "_isXamlEventAttribute",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": null,
                    "name": "domNode",
                    "optional": false
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Component.js",
            "lineNumbers": [
                573,
                588
            ],
            "description": "determinate the local-name of a DomNode\n",
            "definedBy": "js.core.Component",
            "name": "_localNameFromDomNode",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "type"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/DomElement.js",
            "lineNumbers": [
                935,
                948
            ],
            "definedBy": "js.core.DomElement",
            "name": "_mapDOMEventType",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/DomElement.js",
            "lineNumbers": [
                128,
                133
            ],
            "description": "This method is called when the stage or the parent is added to the DOM",
            "private": "",
            "definedBy": "js.core.DomElement",
            "name": "_onDomAdded",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/DomElement.js",
            "lineNumbers": [
                139,
                144
            ],
            "description": "This method is called when the element is removed from DOM",
            "private": "",
            "definedBy": "js.core.DomElement",
            "name": "_onDomRemoved",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                452,
                454
            ],
            "definedBy": "js.core.Bindable",
            "name": "_postConstruct",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                456,
                458
            ],
            "definedBy": "js.core.Bindable",
            "name": "_preDestroy",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Element.js",
            "lineNumbers": [
                202,
                204
            ],
            "definedBy": "js.core.Element",
            "name": "_preinitialize",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "child"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/DomElement.js",
            "lineNumbers": [
                505,
                518
            ],
            "definedBy": "js.core.DomElement",
            "name": "_removeRenderedChild",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "key"
                },
                {
                    "name": "attr"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/DomElement.js",
            "lineNumbers": [
                586,
                610
            ],
            "definedBy": "js.core.DomElement",
            "name": "_renderAttribute",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "key"
                },
                {
                    "name": "attr"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/DomElement.js",
            "lineNumbers": [
                612,
                616
            ],
            "definedBy": "js.core.DomElement",
            "name": "_renderAttributeInternal",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "attributes"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/DomElement.js",
            "lineNumbers": [
                576,
                584
            ],
            "definedBy": "js.core.DomElement",
            "name": "_renderAttributes",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "child"
                },
                {
                    "name": "pos"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/DomElement.js",
            "lineNumbers": [
                384,
                434
            ],
            "definedBy": "js.core.DomElement",
            "name": "_renderChild",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/ui/TextWrapper.js",
            "lineNumbers": [
                34,
                36
            ],
            "definedBy": "js.core.DomElement",
            "overwritesMethod": true,
            "name": "_renderChildren",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "className"
                },
                {
                    "name": "oldClass"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/DomElement.js",
            "lineNumbers": [
                495,
                503
            ],
            "definedBy": "js.core.DomElement",
            "name": "_renderClass",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "cls"
                },
                {
                    "name": "oldCls"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/DomElement.js",
            "lineNumbers": [
                486,
                493
            ],
            "definedBy": "js.core.DomElement",
            "name": "_renderComponentClass",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/ui/TextWrapper.js",
            "lineNumbers": [
                37,
                39
            ],
            "definedBy": "js.core.DomElement",
            "overwritesMethod": true,
            "name": "_renderContentChildren",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "enabled"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/DomElement.js",
            "lineNumbers": [
                357,
                370
            ],
            "definedBy": "js.core.DomElement",
            "name": "_renderEnabled",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": null,
                    "name": "height",
                    "optional": false,
                    "description": "the width in pixel if not a string"
                }
            ],
            "annotations": {},
            "definedInFile": "js/html/HtmlElement.js",
            "lineNumbers": [
                225,
                234
            ],
            "description": "renders the height of the element if the update-policy allows out-going",
            "private": "",
            "definedBy": "js.html.HtmlElement",
            "name": "_renderHeight",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": null,
                    "name": "policy",
                    "optional": false
                }
            ],
            "annotations": {},
            "definedInFile": "js/html/HtmlElement.js",
            "lineNumbers": [
                153,
                155
            ],
            "description": "",
            "private": "",
            "definedBy": "js.html.HtmlElement",
            "name": "_renderHeightUpdatePolicy",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "id"
                }
            ],
            "annotations": {},
            "definedInFile": "js/ui/View.js",
            "lineNumbers": [
                68,
                75
            ],
            "definedBy": "js.ui.View",
            "name": "_renderId",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "layoutClass"
                },
                {
                    "name": "oldLayoutClass"
                }
            ],
            "annotations": {},
            "definedInFile": "js/ui/View.js",
            "lineNumbers": [
                42,
                51
            ],
            "definedBy": "js.ui.View",
            "name": "_renderLayoutClass",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": null,
                    "name": "name",
                    "optional": false
                },
                {
                    "types": null,
                    "name": "value",
                    "optional": false
                }
            ],
            "annotations": {},
            "definedInFile": "js/html/HtmlElement.js",
            "lineNumbers": [
                242,
                251
            ],
            "description": "",
            "private": "",
            "definedBy": "js.html.HtmlElement",
            "name": "_renderPolicyValue",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": null,
                    "name": "selectable",
                    "optional": false
                }
            ],
            "annotations": {},
            "definedInFile": "js/html/HtmlElement.js",
            "lineNumbers": [
                188,
                204
            ],
            "description": "",
            "private": "",
            "definedBy": "js.html.HtmlElement",
            "name": "_renderSelectable",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": null,
                    "name": "selected",
                    "optional": false
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/DomElement.js",
            "lineNumbers": [
                469,
                475
            ],
            "description": "",
            "private": "",
            "definedBy": "js.core.DomElement",
            "name": "_renderSelected",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "string"
                },
                {
                    "name": "oldString"
                }
            ],
            "annotations": {},
            "definedInFile": "js/ui/TextWrapper.js",
            "lineNumbers": [
                56,
                102
            ],
            "name": "_renderString",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "templateName"
                },
                {
                    "name": "placeholderName"
                },
                {
                    "name": "attributes"
                }
            ],
            "annotations": {},
            "definedInFile": "js/ui/View.js",
            "lineNumbers": [
                53,
                66
            ],
            "definedBy": "js.ui.View",
            "name": "_renderTemplateToPlaceHolder",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "visible"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/DomElement.js",
            "lineNumbers": [
                477,
                485
            ],
            "definedBy": "js.core.DomElement",
            "name": "_renderVisible",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": null,
                    "name": "width",
                    "optional": false,
                    "description": "the width in pixel if not a string"
                }
            ],
            "annotations": {},
            "definedInFile": "js/html/HtmlElement.js",
            "lineNumbers": [
                211,
                218
            ],
            "description": "renders the width of the element if the update-policy allows out-going",
            "private": "",
            "definedBy": "js.html.HtmlElement",
            "name": "_renderWidth",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": null,
                    "name": "policy",
                    "optional": false
                }
            ],
            "annotations": {},
            "definedInFile": "js/html/HtmlElement.js",
            "lineNumbers": [
                162,
                164
            ],
            "description": "",
            "private": "",
            "definedBy": "js.html.HtmlElement",
            "name": "_renderWidthUpdatePolicy",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String"
                    ],
                    "name": "key",
                    "optional": false,
                    "description": "name of the attribute"
                },
                {
                    "types": [
                        "String"
                    ],
                    "name": "value",
                    "optional": false,
                    "description": "value of the attribute"
                },
                {
                    "types": [
                        "String"
                    ],
                    "name": "namespaceUri",
                    "optional": true,
                    "description": "namespaceUri for the attribute"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/DomElement.js",
            "lineNumbers": [
                659,
                675
            ],
            "description": "sets the attribute as part of the rendering cycle on the element\n",
            "private": "",
            "definedBy": "js.core.DomElement",
            "name": "_setAttribute",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                258,
                261
            ],
            "description": "sets up the Bindable or Component. It will inject the required injections and\nalso will bind the application wide `MessageBus` to all methods annotated with the\n`.bus()` method annotation\n\nFor `Components` the setUp method is invoked automatically during the add of the Component.\nFor non `Components`\n\n",
            "private": "",
            "see": [
                "{js.core.MessageBus}"
            ],
            "definedBy": "js.core.Bindable",
            "name": "_setUp",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                271,
                274
            ],
            "description": "tears down the Bindable or Component. It will remove the injected variables and\nalso will unbind the annotated event handlers from the application wide `MessageBus`\n",
            "private": "",
            "see": [
                "{js.core.MessageBus}"
            ],
            "definedBy": "js.core.Bindable",
            "name": "_tearDown",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                340,
                362
            ],
            "definedBy": "js.core.Bindable",
            "name": "_unbindBus",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "js.core.Element"
                    ],
                    "name": "child",
                    "optional": false
                },
                {
                    "name": "options"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Component.js",
            "lineNumbers": [
                131,
                166
            ],
            "description": "adds a children",
            "definedBy": "js.core.Component",
            "name": "addChild",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "value"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/DomElement.js",
            "lineNumbers": [
                845,
                865
            ],
            "definedBy": "js.core.DomElement",
            "name": "addClass",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "path"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Component.js",
            "lineNumbers": [
                590,
                598
            ],
            "definedBy": "js.core.Component",
            "name": "baseUrl",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String"
                    ],
                    "name": "eventType",
                    "optional": false,
                    "description": "The name of the event"
                },
                {
                    "name": "callback"
                },
                {
                    "types": [
                        "Object"
                    ],
                    "name": "scope",
                    "optional": true,
                    "description": "This sets the scope for the callback function"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/EventDispatcher.js",
            "lineNumbers": [
                72,
                88
            ],
            "description": "Binds a callback and a scope to a given eventType\n",
            "definedBy": "js.core.EventDispatcher",
            "name": "bind",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "type"
                },
                {
                    "name": "cb"
                },
                {
                    "name": "useCapture"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/DomElement.js",
            "lineNumbers": [
                893,
                913
            ],
            "definedBy": "js.core.DomElement",
            "name": "bindDomEvent",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/DomElement.js",
            "lineNumbers": [
                956,
                960
            ],
            "definedBy": "js.core.DomElement",
            "name": "blur",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/DomElement.js",
            "lineNumbers": [
                744,
                748
            ],
            "definedBy": "js.core.DomElement",
            "name": "bringToFront",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Component.js",
            "lineNumbers": [
                110,
                112
            ],
            "description": "provides access to the MessageBus",
            "returns": {
                "types": [
                    "js.core.MessageBus"
                ]
            },
            "definedBy": "js.core.Component",
            "name": "bus",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/html/HtmlElement.js",
            "lineNumbers": [
                143,
                146
            ],
            "description": "Checks if the element has the correct width and height according to the width and height update policy",
            "definedBy": "js.html.HtmlElement",
            "name": "checkSizePolicies",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                903,
                905
            ],
            "description": "Clears all attributes",
            "returns": {
                "types": [
                    "this"
                ]
            },
            "definedBy": "js.core.Bindable",
            "name": "clear",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "Object"
                    ],
                    "name": "options",
                    "optional": false
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                535,
                561
            ],
            "description": "This method returns a copy of the Object with all attributes on the $\n",
            "returns": {
                "types": [
                    "js.core.Bindable"
                ],
                "description": "a fresh copy of the Bindable"
            },
            "definedBy": "js.core.Bindable",
            "name": "clone",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "path"
                },
                {
                    "name": "callback"
                },
                {
                    "name": "callbackScope"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Component.js",
            "lineNumbers": [
                515,
                520
            ],
            "definedBy": "js.core.Component",
            "name": "createBinding",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Component.js",
            "lineNumbers": [
                360,
                368
            ],
            "definedBy": "js.core.Component",
            "name": "createChildren",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "Function"
                    ],
                    "name": "factory",
                    "optional": false
                },
                {
                    "types": [
                        "Object"
                    ],
                    "name": "attributes",
                    "optional": true
                },
                {
                    "types": null,
                    "name": "descriptor",
                    "optional": true,
                    "defaultValue": "false"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Component.js",
            "lineNumbers": [
                506,
                513
            ],
            "description": "",
            "returns": {
                "types": [
                    "*"
                ]
            },
            "definedBy": "js.core.Component",
            "name": "createComponent",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Base.js",
            "lineNumbers": [
                12,
                18
            ],
            "definedBy": "js.core.Base",
            "name": "ctor",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/EventDispatcher.js",
            "lineNumbers": [
                188,
                199
            ],
            "description": "Clears up the instance",
            "definedBy": "js.core.EventDispatcher",
            "name": "destroy",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "element"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/DomElement.js",
            "lineNumbers": [
                716,
                718
            ],
            "definedBy": "js.core.DomElement",
            "name": "dom",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Base.js",
            "lineNumbers": [
                41,
                43
            ],
            "description": "this is an empty function doing nothing. It can be used as fallback if a method requires a\ncallback function, which hasn't been passed.\n\n```\nfunction myFunction(callback) {\ncallback = callback || this.emptyCallback;\n}\n```\n",
            "returns": {
                "types": [
                    "Function"
                ],
                "description": "a function doing nothing"
            },
            "definedBy": "js.core.Base",
            "name": "emptyCallback",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "key"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Element.js",
            "lineNumbers": [
                191,
                200
            ],
            "definedBy": "js.core.Element",
            "name": "find",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "name"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/DomElement.js",
            "lineNumbers": [
                270,
                294
            ],
            "definedBy": "js.core.DomElement",
            "name": "findContent",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/DomElement.js",
            "lineNumbers": [
                950,
                954
            ],
            "definedBy": "js.core.DomElement",
            "name": "focus",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "Object"
                    ],
                    "name": "scope",
                    "optional": true,
                    "defaultValue": "this",
                    "description": "the scope where the path is evaluated"
                },
                {
                    "types": [
                        "String"
                    ],
                    "name": "key",
                    "optional": false,
                    "description": "or path"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                768,
                842
            ],
            "description": "evaluates a path to retrieve a value\n",
            "returns": {
                "types": null,
                "description": "the value for the path or undefined"
            },
            "definedBy": "js.core.Bindable",
            "name": "get",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "from"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/DomElement.js",
            "lineNumbers": [
                247,
                268
            ],
            "definedBy": "js.core.DomElement",
            "name": "getContentPlaceHolders",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "name"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/DomElement.js",
            "lineNumbers": [
                209,
                229
            ],
            "definedBy": "js.core.DomElement",
            "name": "getPlaceHolder",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "fncName"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                475,
                488
            ],
            "definedBy": "js.core.Bindable",
            "name": "getScopeForFncName",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "key"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                460,
                473
            ],
            "definedBy": "js.core.Bindable",
            "name": "getScopeForKey",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String"
                    ],
                    "name": "name",
                    "optional": false
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Component.js",
            "lineNumbers": [
                213,
                222
            ],
            "description": "Goes up the tree and searches for a template component with the given name.\nReturns null if no template was found.",
            "returns": {
                "types": [
                    "js.core.Template"
                ]
            },
            "definedBy": "js.core.Component",
            "name": "getTemplate",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/DomElement.js",
            "lineNumbers": [
                237,
                245
            ],
            "definedBy": "js.core.DomElement",
            "name": "getViewChildren",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "point"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/DomElement.js",
            "lineNumbers": [
                983,
                1001
            ],
            "definedBy": "js.core.DomElement",
            "name": "globalToLocal",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String"
                    ],
                    "name": "path",
                    "optional": false,
                    "description": "to get the value"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                850,
                852
            ],
            "description": "determinate if a attribute is available\n",
            "returns": {
                "types": [
                    "Boolean"
                ],
                "description": "true if attribute is not undefined"
            },
            "definedBy": "js.core.Bindable",
            "name": "has",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "value"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/DomElement.js",
            "lineNumbers": [
                841,
                843
            ],
            "definedBy": "js.core.DomElement",
            "name": "hasClass",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {
                "on": [
                    [
                        "this",
                        "change"
                    ]
                ]
            },
            "definedInFile": "js/core/DomElement.js",
            "lineNumbers": [
                709,
                715
            ],
            "definedBy": "js.core.DomElement",
            "name": "html",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                231,
                232
            ],
            "description": "the initialize method is a hook function to add a custom logic during the initiation process.",
            "definedBy": "js.core.Bindable",
            "name": "initialize",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "b"
                },
                {
                    "name": "keys"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                995,
                1022
            ],
            "definedBy": "js.core.Bindable",
            "name": "isDeepEqual",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "value"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Element.js",
            "lineNumbers": [
                228,
                230
            ],
            "definedBy": "js.core.Element",
            "name": "isDefined",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "b"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                1023,
                1025
            ],
            "definedBy": "js.core.Bindable",
            "name": "isEqual",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/DomElement.js",
            "lineNumbers": [
                572,
                574
            ],
            "definedBy": "js.core.DomElement",
            "name": "isRendered",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "point"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/DomElement.js",
            "lineNumbers": [
                962,
                981
            ],
            "definedBy": "js.core.DomElement",
            "name": "localToGlobal",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String",
                        "Array"
                    ],
                    "name": "message",
                    "optional": false,
                    "description": "the message to log"
                },
                {
                    "types": [
                        "String"
                    ],
                    "name": "level",
                    "optional": true,
                    "defaultValue": "\"info\"",
                    "description": "the service level of (debug, info, warn, error)"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Base.js",
            "lineNumbers": [
                51,
                72
            ],
            "description": "logs messages to configured logging functions\n",
            "definedBy": "js.core.Base",
            "name": "log",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": null,
                    "name": "value",
                    "optional": false
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Element.js",
            "lineNumbers": [
                225,
                227
            ],
            "description": "Binding helper to negate a Boolean value",
            "returns": {
                "types": [
                    "Boolean"
                ]
            },
            "definedBy": "js.core.Element",
            "name": "not",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/DomElement.js",
            "lineNumbers": [
                231,
                235
            ],
            "definedBy": "js.core.DomElement",
            "name": "remove",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Component.js",
            "lineNumbers": [
                190,
                194
            ],
            "definedBy": "js.core.Component",
            "name": "removeAllChildren",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "child"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Component.js",
            "lineNumbers": [
                168,
                188
            ],
            "definedBy": "js.core.Component",
            "name": "removeChild",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "value"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/DomElement.js",
            "lineNumbers": [
                867,
                891
            ],
            "definedBy": "js.core.DomElement",
            "name": "removeClass",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/DomElement.js",
            "lineNumbers": [
                296,
                325
            ],
            "definedBy": "js.core.DomElement",
            "name": "render",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Base.js",
            "lineNumbers": [
                25,
                27
            ],
            "description": "determinate if the application runs in the browser or on node\n",
            "returns": {
                "types": [
                    "Boolean"
                ],
                "description": "true if the application runs in a browser"
            },
            "definedBy": "js.core.Base",
            "name": "runsInBrowser",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/DomElement.js",
            "lineNumbers": [
                749,
                753
            ],
            "definedBy": "js.core.DomElement",
            "name": "sendToBack",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String"
                    ],
                    "name": "key",
                    "optional": false,
                    "description": "The attribute key"
                },
                {
                    "types": [
                        "String"
                    ],
                    "name": "value",
                    "optional": false,
                    "description": "The attribute value"
                },
                {
                    "types": [
                        "Object"
                    ],
                    "name": "options",
                    "optional": false,
                    "description": "A hash of options"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                651,
                738
            ],
            "description": "Sets new values for attributes and notify about changes\n",
            "returns": {
                "types": [
                    "js.core.Bindable"
                ],
                "description": "this"
            },
            "definedBy": "js.core.Bindable",
            "name": "set",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "child"
                },
                {
                    "name": "index"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/DomElement.js",
            "lineNumbers": [
                719,
                742
            ],
            "definedBy": "js.core.DomElement",
            "name": "setChildIndex",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "child"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/DomElement.js",
            "lineNumbers": [
                754,
                765
            ],
            "definedBy": "js.core.DomElement",
            "name": "setChildInvisible",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "child"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/DomElement.js",
            "lineNumbers": [
                766,
                785
            ],
            "definedBy": "js.core.DomElement",
            "name": "setChildVisible",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "key"
                },
                {
                    "name": "value"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                740,
                754
            ],
            "definedBy": "js.core.Bindable",
            "name": "setLater",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                500,
                528
            ],
            "description": "Writes attributes back to the source",
            "definedBy": "js.core.Bindable",
            "name": "sync",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": null,
                    "name": "fnc",
                    "optional": false,
                    "description": "the function to synchronize"
                },
                {
                    "types": null,
                    "name": "cacheId",
                    "optional": false,
                    "description": "the cacheId for the fnc call"
                },
                {
                    "types": null,
                    "name": "callback",
                    "optional": false,
                    "description": "the callback to be called in the fnc"
                },
                {
                    "types": null,
                    "name": "scope",
                    "optional": false,
                    "description": "the fnc scope"
                },
                {
                    "types": null,
                    "name": "clear",
                    "optional": false,
                    "description": "if you want to clear the cache after all callbacks are called"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Base.js",
            "lineNumbers": [
                127,
                167
            ],
            "description": "",
            "definedBy": "js.core.Base",
            "name": "synchronizeFunctionCall",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String"
                    ],
                    "name": "eventType",
                    "optional": false
                },
                {
                    "types": [
                        "EventDispatcher.Event",
                        "Object"
                    ],
                    "name": "event",
                    "optional": false,
                    "description": "If you use an Object the object is wrapped in an Event"
                },
                {
                    "types": null,
                    "name": "target",
                    "optional": false
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/EventDispatcher.js",
            "lineNumbers": [
                97,
                160
            ],
            "description": "Triggers a specific event and the * event\n",
            "definedBy": "js.core.EventDispatcher",
            "name": "trigger",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String"
                    ],
                    "name": "eventType",
                    "optional": false
                },
                {
                    "types": [
                        "Function"
                    ],
                    "name": "callback",
                    "optional": false
                },
                {
                    "name": "scope"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/EventDispatcher.js",
            "lineNumbers": [
                168,
                183
            ],
            "description": "Unbinds callbacks for events\n",
            "definedBy": "js.core.EventDispatcher",
            "name": "unbind",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "type"
                },
                {
                    "name": "cb"
                },
                {
                    "name": "useCapture"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/DomElement.js",
            "lineNumbers": [
                914,
                933
            ],
            "definedBy": "js.core.DomElement",
            "name": "unbindDomEvent",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String",
                        "Object"
                    ],
                    "name": "key",
                    "optional": false,
                    "description": "the attribute or attributes to unset"
                },
                {
                    "types": [
                        "Object"
                    ],
                    "name": "options",
                    "optional": true
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                894,
                897
            ],
            "description": "Unset attribute on $",
            "returns": {
                "types": [
                    "this"
                ]
            },
            "definedBy": "js.core.Bindable",
            "name": "unset",
            "visibility": "public"
        }
    ],
    "staticMethods": [],
    "defaults": {
        "tagName": {
            "name": "tagName",
            "defaultType": "value",
            "visibility": "public",
            "value": "span",
            "lineNumbers": [
                29,
                29
            ],
            "definedBy": "js.ui.View",
            "overwrites": true
        },
        "selected": {
            "name": "selected",
            "defaultType": "value",
            "visibility": "public",
            "value": null,
            "lineNumbers": [
                63,
                63
            ],
            "description": "If not null, false or undefined the \"active\" CSS class is added\n",
            "types": [
                "Boolean"
            ],
            "definedBy": "js.html.HtmlElement"
        },
        "selectable": {
            "name": "selectable",
            "defaultType": "value",
            "visibility": "public",
            "value": null,
            "lineNumbers": [
                69,
                69
            ],
            "description": "If not null, false or undefined a click will set the element to selected",
            "types": [
                "Boolean"
            ],
            "definedBy": "js.html.HtmlElement"
        },
        "namespace": {
            "name": "namespace",
            "defaultType": "factory",
            "visibility": "public",
            "lineNumbers": [
                75,
                75
            ],
            "description": "the target namespace for the HTMLElement",
            "types": [
                "String"
            ],
            "definedBy": "js.html.HtmlElement"
        },
        "position": {
            "name": "position",
            "defaultType": "value",
            "visibility": "public",
            "value": null,
            "lineNumbers": [
                81,
                81
            ],
            "description": "Possible values: \"absolute\", \"relative\"",
            "types": [
                "String"
            ],
            "definedBy": "js.html.HtmlElement"
        },
        "heightUpdatePolicy": {
            "name": "heightUpdatePolicy",
            "defaultType": "value",
            "visibility": "public",
            "value": "out",
            "lineNumbers": [
                97,
                97
            ],
            "description": "\nThe heightUpdatePolicy configures whether the height of the component is\nupdated when the DOM node height changes or if the DOM node height is updated\nwhen the component height changes.\n\n**Possible values:**\n\n+  **in** - \"height\" attribute is determined by DOM nodes offsetHeight\n+  **out** - DOM node height is determined by the \"height\" attribute\n+  **both** - both directions\n",
            "types": [
                "String"
            ],
            "definedBy": "js.html.HtmlElement"
        },
        "widthUpdatePolicy": {
            "name": "widthUpdatePolicy",
            "defaultType": "value",
            "visibility": "public",
            "value": "out",
            "lineNumbers": [
                113,
                113
            ],
            "description": "\nThe widthUpdatePolicy configures whether the width of the component is\nupdated when the DOM node width changes or if the DOM node width is updated\nwhen the component width changes.\n\n**Possible values:**\n\n+  **in** - \"width\" attribute is determined by DOM nodes offsetWidth\n+  **out** - DOM node width is determined by the \"width\" attribute\n+  **both** - both directions\n",
            "types": [
                "String"
            ],
            "definedBy": "js.html.HtmlElement"
        },
        "class": {
            "name": "class",
            "defaultType": "value",
            "visibility": "public",
            "value": null,
            "lineNumbers": [
                56,
                56
            ],
            "description": "sets the class for the Component.\nThe resulting class attributes is the union from class and componentClass of the Element.\n",
            "types": [
                "String"
            ],
            "definedBy": "js.core.DomElement"
        },
        "componentClass": {
            "name": "componentClass",
            "defaultType": "value",
            "visibility": "public",
            "value": null,
            "lineNumbers": [
                64,
                64
            ],
            "description": "sets the componentClass for the Component.\nThe resulting class attributes is the union from class and componentClass of the Element.\n",
            "types": [
                "String"
            ],
            "definedBy": "js.core.DomElement"
        },
        "animationClass": {
            "name": "animationClass",
            "defaultType": "value",
            "visibility": "public",
            "value": null,
            "lineNumbers": [
                69,
                69
            ],
            "description": "",
            "definedBy": "js.core.DomElement"
        },
        "visible": {
            "name": "visible",
            "defaultType": "value",
            "visibility": "public",
            "value": true,
            "lineNumbers": [
                75,
                75
            ],
            "description": "sets the visibility of an component. If the value is false the component is removed from the DOM.\n",
            "types": [
                "Boolean"
            ],
            "definedBy": "js.core.DomElement"
        },
        "initializeInvisibleChildren": {
            "name": "initializeInvisibleChildren",
            "defaultType": "value",
            "visibility": "public",
            "value": false,
            "lineNumbers": [
                82,
                82
            ],
            "description": "if true the children are initialized even when the element is not visible\n",
            "types": [
                "Boolean"
            ],
            "definedBy": "js.core.DomElement"
        },
        "enabled": {
            "name": "enabled",
            "defaultType": "value",
            "visibility": "public",
            "value": true,
            "lineNumbers": [
                87,
                87
            ],
            "types": [
                "Boolean"
            ],
            "definedBy": "js.core.DomElement"
        },
        "cid": {
            "name": "cid",
            "defaultType": "factory",
            "visibility": "public",
            "lineNumbers": [
                67,
                67
            ],
            "description": "the cid is a unique identifier for the component within a xaml class. \\\nThe corresponding component will be automatically added to the $ of the instance of the xaml class.\n",
            "types": [
                "String"
            ],
            "definedBy": "js.core.Component"
        },
        "creationPolicy": {
            "name": "creationPolicy",
            "defaultType": "value",
            "visibility": "public",
            "value": "auto",
            "lineNumbers": [
                134,
                134
            ],
            "description": "Decides if the initialization of the component is started automatically or manually by the application",
            "types": [
                "String"
            ],
            "definedBy": "js.core.Element"
        }
    },
    "properties": {
        "$domAttributes": {
            "name": "$domAttributes",
            "visibility": "private",
            "definedInFile": "js/ui/View.js",
            "lineNumbers": [
                6,
                6
            ],
            "propertyType": "complex",
            "value": " ['class', 'id', 'style', 'tabindex', 'name' ,'draggable', 'title']",
            "definedBy": "js.ui.View"
        },
        "$classAttributes": {
            "name": "$classAttributes",
            "visibility": "private",
            "definedInFile": "js/core/DomElement.js",
            "lineNumbers": [
                38,
                46
            ],
            "propertyType": "complex",
            "value": " [\n                /^\\$/,\n                /^xmlns/,\n                /^on/,\n                \"cid\",\n                /^_/, // private attributes,\n                'animationClass',\n                'initializeInvisibleChildren'\n            ]",
            "definedBy": "js.core.DomElement"
        },
        "$excludedStyleAttributes": {
            "name": "$excludedStyleAttributes",
            "visibility": "private",
            "definedInFile": "js/html/HtmlElement.js",
            "lineNumbers": [
                124,
                124
            ],
            "propertyType": "complex",
            "value": " ['src', 'content', 'item']",
            "types": [
                "Array"
            ],
            "definedBy": "js.html.HtmlElement"
        },
        "$renderAsStyleWithPx": {
            "name": "$renderAsStyleWithPx",
            "visibility": "private",
            "definedInFile": "js/html/HtmlElement.js",
            "lineNumbers": [
                129,
                129
            ],
            "propertyType": "complex",
            "value": " ['left', 'top', 'maxWidth', 'maxHeight']",
            "types": [
                "Array"
            ],
            "definedBy": "js.html.HtmlElement"
        },
        "$errorAttribute": {
            "name": "$errorAttribute",
            "visibility": "private",
            "definedInFile": "js/core/Component.js",
            "lineNumbers": [
                70,
                70
            ],
            "value": "null",
            "propertyType": "value",
            "definedBy": "js.core.Component"
        },
        "$defaultContentName": {
            "name": "$defaultContentName",
            "visibility": "private",
            "definedInFile": "js/core/Component.js",
            "lineNumbers": [
                75,
                75
            ],
            "value": "null",
            "propertyType": "value",
            "description": "if set all children from the descriptor will be placed into a\njs.core.Content block with the name of $defaultContentName",
            "definedBy": "js.core.Component"
        },
        "$defaultTemplateName": {
            "name": "$defaultTemplateName",
            "visibility": "private",
            "definedInFile": "js/core/Component.js",
            "lineNumbers": [
                77,
                77
            ],
            "value": "null",
            "propertyType": "value",
            "definedBy": "js.core.Component"
        }
    },
    "fqClassName": "js.ui.TextWrapper",
    "inherit": "js.ui.View",
    "dependencies": [
        "js.ui.View"
    ],
    "type": "js",
    "file": "js/ui/TextWrapper.js",
    "package": "js.ui",
    "inheritancePath": [
        "js.ui.View",
        "js.html.HtmlElement",
        "js.core.DomElement",
        "js.core.Component",
        "js.core.Element",
        "js.core.Bindable",
        "js.core.EventDispatcher",
        "js.core.Base"
    ]
}