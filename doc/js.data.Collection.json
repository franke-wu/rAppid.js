{
    "methods": [
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/EventDispatcher.js",
            "lineNumbers": [
                201,
                203
            ],
            "definedBy": "js.core.EventDispatcher",
            "name": "_beforeDestroy",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                314,
                338
            ],
            "definedBy": "js.core.Bindable",
            "name": "_bindBus",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": null,
                    "name": "attribute",
                    "optional": false
                },
                {
                    "types": null,
                    "name": "key",
                    "optional": false
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                568,
                594
            ],
            "description": "Returns a copy of the attribute. This method is a hook for further cloning options",
            "private": "",
            "definedBy": "js.core.Bindable",
            "name": "_cloneAttribute",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "Object"
                    ],
                    "name": "attributes",
                    "optional": false,
                    "description": "contains the changed attributes"
                },
                {
                    "types": [
                        "Object"
                    ],
                    "name": "options",
                    "optional": false,
                    "description": "the options passed in the set method"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                862,
                864
            ],
            "description": "called after attributes has set and some of the has been changed\n",
            "abstract": "",
            "private": "",
            "definedBy": "js.core.Bindable",
            "name": "_commitChangedAttributes",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                756,
                759
            ],
            "definedBy": "js.core.Bindable",
            "name": "_commitInvalidatedAttributes",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "js.data.Query"
                    ],
                    "name": "query",
                    "optional": false
                },
                {
                    "types": [
                        "Object"
                    ],
                    "name": "options",
                    "optional": false
                }
            ],
            "annotations": {},
            "definedInFile": "js/data/Collection.js",
            "lineNumbers": [
                93,
                100
            ],
            "description": "This method creates internally a filtered collection",
            "returns": {
                "types": [
                    "js.data.Collection"
                ]
            },
            "private": "",
            "name": "_createFilteredCollection",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "js.data.Query"
                    ],
                    "name": "query",
                    "optional": false
                },
                {
                    "types": [
                        "Object"
                    ],
                    "name": "options",
                    "optional": false
                }
            ],
            "annotations": {},
            "definedInFile": "js/data/Collection.js",
            "lineNumbers": [
                108,
                114
            ],
            "description": "This method creates internally a sorted collection",
            "returns": {
                "types": [
                    "this.factory"
                ]
            },
            "private": "",
            "name": "_createSortedCollection",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "Function"
                    ],
                    "name": "fnc",
                    "optional": false
                },
                {
                    "types": [
                        "String"
                    ],
                    "name": "cacheId",
                    "optional": true
                },
                {
                    "types": [
                        "Number"
                    ],
                    "name": "delay",
                    "optional": true
                },
                {
                    "types": [
                        "Object"
                    ],
                    "name": "scope",
                    "optional": true
                },
                {
                    "types": [
                        "Array"
                    ],
                    "name": "parameters",
                    "optional": true
                },
                {
                    "types": [
                        "String"
                    ],
                    "name": "strategy",
                    "optional": true,
                    "defaultValue": "loop",
                    "description": "loop will trigger the function at least every delay, wait will clear the timeout"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Base.js",
            "lineNumbers": [
                84,
                118
            ],
            "description": "",
            "private": "",
            "definedBy": "js.core.Base",
            "name": "_debounceFunctionCall",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                600,
                602
            ],
            "description": "",
            "returns": {
                "types": [
                    "Object"
                ],
                "description": "returns the default attributes and includes the defaults from base classes"
            },
            "private": "",
            "definedBy": "js.core.Bindable",
            "name": "_defaultAttributes",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/EventDispatcher.js",
            "lineNumbers": [
                209,
                215
            ],
            "definedBy": "js.core.EventDispatcher",
            "name": "_destroyCompleted",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                364,
                378
            ],
            "definedBy": "js.core.Bindable",
            "name": "_extract",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String"
                    ],
                    "name": "property",
                    "optional": false,
                    "description": "the name of the static property used to find defaults"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                611,
                639
            ],
            "description": "generates a default chain containing the values from this instance and base classes\n",
            "returns": {
                "types": [
                    "*"
                ]
            },
            "private": "",
            "definedBy": "js.core.Bindable",
            "name": "_generateDefaultsChain",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "attributes"
                },
                {
                    "name": "search"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                866,
                875
            ],
            "definedBy": "js.core.Bindable",
            "name": "_hasAll",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "attributes"
                },
                {
                    "name": "search"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                877,
                886
            ],
            "definedBy": "js.core.Bindable",
            "name": "_hasSome",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                439,
                450
            ],
            "definedBy": "js.core.Bindable",
            "name": "_initializationComplete",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                216,
                226
            ],
            "description": "starts the initialization of the `Bindable` if it hasn't initialized yet.\n\nIt calls the following methods:\n\n* initialize();\n* _initializeBindings();\n",
            "private": "",
            "definedBy": "js.core.Bindable",
            "name": "_initialize",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                383,
                433
            ],
            "description": "Initialize all Binding and Event attributes",
            "definedBy": "js.core.Bindable",
            "name": "_initializeBindings",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                435,
                437
            ],
            "definedBy": "js.core.Bindable",
            "name": "_initializeBindingsBeforeComplete",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                201,
                204
            ],
            "description": "\ninvokes the `_initialize` method. This method is a hook function and is overwritten by js.core.Component\n",
            "private": "",
            "definedBy": "js.core.Bindable",
            "name": "_initializeFromCtor",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                276,
                311
            ],
            "definedBy": "js.core.Bindable",
            "name": "_inject",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                241,
                243
            ],
            "description": "\nreturns the chained object defining the required injections\n",
            "returns": {
                "types": [
                    "Object"
                ]
            },
            "private": "",
            "definedBy": "js.core.Bindable",
            "name": "_injectChain",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/EventDispatcher.js",
            "lineNumbers": [
                205,
                207
            ],
            "definedBy": "js.core.EventDispatcher",
            "name": "_innerDestroy",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "Event"
                    ],
                    "name": "e",
                    "optional": false
                },
                {
                    "types": [
                        "Object"
                    ],
                    "name": "item",
                    "optional": false
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/List.js",
            "lineNumbers": [
                112,
                114
            ],
            "description": "",
            "private": "",
            "definedBy": "js.core.List",
            "name": "_onItemChange",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "e"
                },
                {
                    "name": "item"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/List.js",
            "lineNumbers": [
                115,
                119
            ],
            "definedBy": "js.core.List",
            "name": "_onItemEvent",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                452,
                454
            ],
            "definedBy": "js.core.Bindable",
            "name": "_postConstruct",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                456,
                458
            ],
            "definedBy": "js.core.Bindable",
            "name": "_preDestroy",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                258,
                261
            ],
            "description": "sets up the Bindable or Component. It will inject the required injections and\nalso will bind the application wide `MessageBus` to all methods annotated with the\n`.bus()` method annotation\n\nFor `Components` the setUp method is invoked automatically during the add of the Component.\nFor non `Components`\n\n",
            "private": "",
            "see": [
                "{js.core.MessageBus}"
            ],
            "definedBy": "js.core.Bindable",
            "name": "_setUp",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                271,
                274
            ],
            "description": "tears down the Bindable or Component. It will remove the injected variables and\nalso will unbind the annotated event handlers from the application wide `MessageBus`\n",
            "private": "",
            "see": [
                "{js.core.MessageBus}"
            ],
            "definedBy": "js.core.Bindable",
            "name": "_tearDown",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                340,
                362
            ],
            "definedBy": "js.core.Bindable",
            "name": "_unbindBus",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "Array",
                        "Object"
                    ],
                    "name": "items",
                    "optional": false
                },
                {
                    "types": [
                        "Object"
                    ],
                    "name": "options",
                    "optional": false
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/List.js",
            "lineNumbers": [
                77,
                105
            ],
            "description": "This method adds one ore items to the array.",
            "definedBy": "js.core.List",
            "name": "add",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": null,
                    "name": "index",
                    "optional": false
                }
            ],
            "annotations": {
                "on": [
                    [
                        "this",
                        "*"
                    ]
                ]
            },
            "definedInFile": "js/core/List.js",
            "lineNumbers": [
                219,
                224
            ],
            "description": "Returns item at a specific index",
            "returns": {
                "types": [
                    "*"
                ]
            },
            "definedBy": "js.core.List",
            "name": "at",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String"
                    ],
                    "name": "eventType",
                    "optional": false,
                    "description": "The name of the event"
                },
                {
                    "name": "callback"
                },
                {
                    "types": [
                        "Object"
                    ],
                    "name": "scope",
                    "optional": true,
                    "description": "This sets the scope for the callback function"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/EventDispatcher.js",
            "lineNumbers": [
                72,
                88
            ],
            "description": "Binds a callback and a scope to a given eventType\n",
            "definedBy": "js.core.EventDispatcher",
            "name": "bind",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                903,
                905
            ],
            "description": "Clears all attributes",
            "returns": {
                "types": [
                    "this"
                ]
            },
            "definedBy": "js.core.Bindable",
            "name": "clear",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/data/Collection.js",
            "lineNumbers": [
                405,
                410
            ],
            "definedBy": "js.core.Bindable",
            "overwritesMethod": true,
            "name": "clone",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "item"
                }
            ],
            "annotations": {
                "on": [
                    [
                        "this",
                        "*"
                    ]
                ]
            },
            "definedInFile": "js/core/List.js",
            "lineNumbers": [
                269,
                271
            ],
            "definedBy": "js.core.List",
            "name": "contains",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "Object"
                    ],
                    "name": "options",
                    "optional": false
                },
                {
                    "types": [
                        "Function"
                    ],
                    "name": "callback",
                    "optional": false
                }
            ],
            "annotations": {},
            "definedInFile": "js/data/Collection.js",
            "lineNumbers": [
                340,
                348
            ],
            "description": "Asynchronous counts the collection. The count is returned in the callback.\nNote: The dataSource must support the countCollection method\n",
            "name": "count",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String"
                    ],
                    "name": "id",
                    "optional": true,
                    "description": "the id of the item"
                },
                {
                    "types": [
                        "Function"
                    ],
                    "name": "modelFactory",
                    "optional": true
                }
            ],
            "annotations": {},
            "definedInFile": "js/data/Collection.js",
            "lineNumbers": [
                289,
                296
            ],
            "description": "Creates an item with the $modelFactory of the collection.\n\nIn other words. It creates a model for the collection but the model is not added to the collection.\n",
            "returns": {
                "types": [
                    "js.data.Entity"
                ]
            },
            "name": "createItem",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "items",
                    "types": [
                        "Array"
                    ],
                    "optional": false,
                    "description": "to add"
                },
                {
                    "name": "options",
                    "types": [
                        "Object"
                    ],
                    "optional": false,
                    "description": "attributes to set"
                }
            ],
            "annotations": {},
            "definedInFile": "js/data/Collection.js",
            "lineNumbers": [
                25,
                54
            ],
            "description": " read only to determinate if its a collection and prevent circular dependencies",
            "definedBy": "js.core.Base",
            "overwritesMethod": true,
            "name": "ctor",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/data/Collection.js",
            "lineNumbers": [
                399,
                403
            ],
            "definedBy": "js.core.EventDispatcher",
            "overwritesMethod": true,
            "name": "destroy",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "Function"
                    ],
                    "name": "fnc",
                    "optional": false,
                    "description": "callback with signature function(item, index)"
                },
                {
                    "types": [
                        "Object"
                    ],
                    "name": "scope",
                    "optional": false,
                    "description": "The call scope of the callback"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/List.js",
            "lineNumbers": [
                230,
                236
            ],
            "description": "Iterates over all items with given callback",
            "definedBy": "js.core.List",
            "name": "each",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Base.js",
            "lineNumbers": [
                41,
                43
            ],
            "description": "this is an empty function doing nothing. It can be used as fallback if a method requires a\ncallback function, which hasn't been passed.\n\n```\nfunction myFunction(callback) {\ncallback = callback || this.emptyCallback;\n}\n```\n",
            "returns": {
                "types": [
                    "Function"
                ],
                "description": "a function doing nothing"
            },
            "definedBy": "js.core.Base",
            "name": "emptyCallback",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "Object"
                    ],
                    "name": "options",
                    "optional": true
                },
                {
                    "types": [
                        "Function"
                    ],
                    "name": "callback",
                    "optional": false
                }
            ],
            "annotations": {},
            "definedInFile": "js/data/Collection.js",
            "lineNumbers": [
                173,
                258
            ],
            "description": "\nWith no options it fetches all pages of the collection. So be careful.\n\nIf you want to fetch a specific page, provide limit and/or offset in the options object.\nThe callback will then return the err object and a page with the size of the provided limit and offset\n",
            "name": "fetch",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "Number"
                    ],
                    "name": "pageIndex",
                    "optional": false,
                    "description": "starts at 0"
                },
                {
                    "types": [
                        "Object"
                    ],
                    "name": "options",
                    "optional": false
                },
                {
                    "types": [
                        "Function"
                    ],
                    "name": "callback",
                    "optional": false
                }
            ],
            "annotations": {},
            "definedInFile": "js/data/Collection.js",
            "lineNumbers": [
                304,
                332
            ],
            "description": "Fetches a page and returns it in the callback\n",
            "name": "fetchPage",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "js.data.Query"
                    ],
                    "name": "query",
                    "optional": false
                }
            ],
            "annotations": {},
            "definedInFile": "js/data/Collection.js",
            "lineNumbers": [
                61,
                85
            ],
            "description": "",
            "returns": {
                "types": [
                    "*"
                ]
            },
            "name": "filter",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "Function"
                    ],
                    "name": "fnc",
                    "optional": false,
                    "description": "Function to execute on each value in the list"
                },
                {
                    "types": [
                        "Object"
                    ],
                    "name": "scope",
                    "optional": false,
                    "description": "The this object"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/List.js",
            "lineNumbers": [
                245,
                259
            ],
            "description": "Iterates over all items with the function.\nReturns the element when the function returns true.\n",
            "returns": {
                "types": [
                    "*"
                ]
            },
            "definedBy": "js.core.List",
            "name": "find",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "Object"
                    ],
                    "name": "scope",
                    "optional": true,
                    "defaultValue": "this",
                    "description": "the scope where the path is evaluated"
                },
                {
                    "types": [
                        "String"
                    ],
                    "name": "key",
                    "optional": false,
                    "description": "or path"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                768,
                842
            ],
            "description": "evaluates a path to retrieve a value\n",
            "returns": {
                "types": null,
                "description": "the value for the path or undefined"
            },
            "definedBy": "js.core.Bindable",
            "name": "get",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "childFactory"
                }
            ],
            "annotations": {},
            "definedInFile": "js/data/Collection.js",
            "lineNumbers": [
                273,
                275
            ],
            "name": "getContextForChild",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "method"
                }
            ],
            "annotations": {},
            "definedInFile": "js/data/Collection.js",
            "lineNumbers": [
                393,
                395
            ],
            "name": "getQueryParameters",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/data/Collection.js",
            "lineNumbers": [
                159,
                161
            ],
            "description": "Returns the original root collection of a query or sorted or filtered collection.\n",
            "returns": {
                "types": [
                    "js.data.Collection"
                ]
            },
            "name": "getRoot",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "fncName"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                475,
                488
            ],
            "definedBy": "js.core.Bindable",
            "name": "getScopeForFncName",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "key"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                460,
                473
            ],
            "definedBy": "js.core.Bindable",
            "name": "getScopeForKey",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "method"
                }
            ],
            "annotations": {},
            "definedInFile": "js/data/Collection.js",
            "lineNumbers": [
                396,
                398
            ],
            "name": "getSortParameters",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String"
                    ],
                    "name": "path",
                    "optional": false,
                    "description": "to get the value"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                850,
                852
            ],
            "description": "determinate if a attribute is available\n",
            "returns": {
                "types": [
                    "Boolean"
                ],
                "description": "true if attribute is not undefined"
            },
            "definedBy": "js.core.Bindable",
            "name": "has",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "item"
                }
            ],
            "annotations": {
                "on": [
                    [
                        "this",
                        "*"
                    ]
                ]
            },
            "definedInFile": "js/core/List.js",
            "lineNumbers": [
                265,
                267
            ],
            "description": "Checks if item is included in List",
            "returns": {
                "types": [
                    "Boolean"
                ]
            },
            "definedBy": "js.core.List",
            "name": "includes",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "Object"
                    ],
                    "name": "item",
                    "optional": false
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/List.js",
            "lineNumbers": [
                143,
                145
            ],
            "description": "Returns the index of the item",
            "returns": {
                "types": [
                    "Number"
                ],
                "description": "index"
            },
            "definedBy": "js.core.List",
            "name": "indexOf",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                231,
                232
            ],
            "description": "the initialize method is a hook function to add a custom logic during the initiation process.",
            "definedBy": "js.core.Bindable",
            "name": "initialize",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/data/Collection.js",
            "lineNumbers": [
                357,
                374
            ],
            "description": "This method invalidates the page cache of the collection.\nIt also clears all page caches of query collections, that have this collection has root collection.\nAfter the invalidation the $itemsCount is set to NaN and a reset is done. So all listeners are informed of the change.\n\nYou should call this method after removing or adding some item to the collection.\n",
            "name": "invalidatePageCache",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "b"
                },
                {
                    "name": "keys"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                995,
                1022
            ],
            "definedBy": "js.core.Bindable",
            "name": "isDeepEqual",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {
                "onChange": [
                    "$itemsCount"
                ]
            },
            "definedInFile": "js/data/Collection.js",
            "lineNumbers": [
                385,
                391
            ],
            "description": "Returns true if list is empty",
            "definedBy": "js.core.List",
            "overwritesMethod": true,
            "name": "isEmpty",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "b"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                1023,
                1025
            ],
            "definedBy": "js.core.Bindable",
            "name": "isEqual",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String",
                        "Array"
                    ],
                    "name": "message",
                    "optional": false,
                    "description": "the message to log"
                },
                {
                    "types": [
                        "String"
                    ],
                    "name": "level",
                    "optional": true,
                    "defaultValue": "\"info\"",
                    "description": "the service level of (debug, info, warn, error)"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Base.js",
            "lineNumbers": [
                51,
                72
            ],
            "description": "logs messages to configured logging functions\n",
            "definedBy": "js.core.Base",
            "name": "log",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/data/Collection.js",
            "lineNumbers": [
                264,
                271
            ],
            "description": "Returns the number of pages\n",
            "returns": {
                "types": [
                    "*"
                ]
            },
            "name": "pageCount",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "data"
                }
            ],
            "annotations": {},
            "definedInFile": "js/data/Collection.js",
            "lineNumbers": [
                277,
                279
            ],
            "name": "parse",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/List.js",
            "lineNumbers": [
                53,
                55
            ],
            "description": "Removes last item  of the list",
            "returns": {
                "types": [
                    "*"
                ]
            },
            "definedBy": "js.core.List",
            "name": "pop",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": null,
                    "name": "item",
                    "optional": false
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/List.js",
            "lineNumbers": [
                46,
                48
            ],
            "description": "Pushes one item to the list",
            "definedBy": "js.core.List",
            "name": "push",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "js.data.Query"
                    ],
                    "name": "query",
                    "optional": false
                }
            ],
            "annotations": {},
            "definedInFile": "js/data/Collection.js",
            "lineNumbers": [
                150,
                152
            ],
            "description": "Returns a query collection\n",
            "returns": {
                "types": [
                    "js.data.Collection"
                ]
            },
            "name": "query",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "Object",
                        "Array"
                    ],
                    "name": "items",
                    "optional": false
                },
                {
                    "types": [
                        "Object"
                    ],
                    "name": "options",
                    "optional": false
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/List.js",
            "lineNumbers": [
                125,
                137
            ],
            "description": "Removes an Array or just one item from the list. Triggers remove events.",
            "definedBy": "js.core.List",
            "name": "remove",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "Number"
                    ],
                    "name": "index",
                    "optional": false
                },
                {
                    "types": [
                        "Object"
                    ],
                    "name": "options",
                    "optional": false
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/List.js",
            "lineNumbers": [
                152,
                169
            ],
            "description": "Removes one item a specific index and triggers remove event",
            "returns": {
                "types": [
                    "Object"
                ],
                "description": "removed item"
            },
            "definedBy": "js.core.List",
            "name": "removeAt",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "Array"
                    ],
                    "name": "items",
                    "optional": false
                },
                {
                    "types": [
                        "Object"
                    ],
                    "name": "options",
                    "optional": false
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/List.js",
            "lineNumbers": [
                175,
                198
            ],
            "description": "Resets the list with the given items and triggers reset event",
            "definedBy": "js.core.List",
            "name": "reset",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Base.js",
            "lineNumbers": [
                25,
                27
            ],
            "description": "determinate if the application runs in the browser or on node\n",
            "returns": {
                "types": [
                    "Boolean"
                ],
                "description": "true if the application runs in a browser"
            },
            "definedBy": "js.core.Base",
            "name": "runsInBrowser",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String"
                    ],
                    "name": "key",
                    "optional": false,
                    "description": "The attribute key"
                },
                {
                    "types": [
                        "String"
                    ],
                    "name": "value",
                    "optional": false,
                    "description": "The attribute value"
                },
                {
                    "types": [
                        "Object"
                    ],
                    "name": "options",
                    "optional": false,
                    "description": "A hash of options"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                651,
                738
            ],
            "description": "Sets new values for attributes and notify about changes\n",
            "returns": {
                "types": [
                    "js.core.Bindable"
                ],
                "description": "this"
            },
            "definedBy": "js.core.Bindable",
            "name": "set",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "key"
                },
                {
                    "name": "value"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                740,
                754
            ],
            "definedBy": "js.core.Bindable",
            "name": "setLater",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/List.js",
            "lineNumbers": [
                60,
                62
            ],
            "description": "Removes first item of list",
            "returns": {
                "types": [
                    "*"
                ]
            },
            "definedBy": "js.core.List",
            "name": "shift",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {
                "onChange": [
                    "$itemsCount"
                ]
            },
            "definedInFile": "js/data/Collection.js",
            "lineNumbers": [
                379,
                381
            ],
            "description": "Returns the $itemsCount of the collection.\n",
            "definedBy": "js.core.List",
            "overwritesMethod": true,
            "name": "size",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "js.data.Query"
                    ],
                    "name": "query",
                    "optional": false
                }
            ],
            "annotations": {},
            "definedInFile": "js/data/Collection.js",
            "lineNumbers": [
                121,
                143
            ],
            "description": "Returns a sorted query collection\n",
            "returns": {
                "types": [
                    "js.data.Collection"
                ]
            },
            "definedBy": "js.core.List",
            "overwritesMethod": true,
            "name": "sort",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                500,
                528
            ],
            "description": "Writes attributes back to the source",
            "definedBy": "js.core.Bindable",
            "name": "sync",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": null,
                    "name": "fnc",
                    "optional": false,
                    "description": "the function to synchronize"
                },
                {
                    "types": null,
                    "name": "cacheId",
                    "optional": false,
                    "description": "the cacheId for the fnc call"
                },
                {
                    "types": null,
                    "name": "callback",
                    "optional": false,
                    "description": "the callback to be called in the fnc"
                },
                {
                    "types": null,
                    "name": "scope",
                    "optional": false,
                    "description": "the fnc scope"
                },
                {
                    "types": null,
                    "name": "clear",
                    "optional": false,
                    "description": "if you want to clear the cache after all callbacks are called"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Base.js",
            "lineNumbers": [
                127,
                167
            ],
            "description": "",
            "definedBy": "js.core.Base",
            "name": "synchronizeFunctionCall",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "Function"
                    ],
                    "name": "transformFnc",
                    "optional": false
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/List.js",
            "lineNumbers": [
                345,
                357
            ],
            "description": "Transforms List to an array\nYou can specify a transform fnc",
            "returns": {
                "types": [
                    "Array"
                ]
            },
            "definedBy": "js.core.List",
            "name": "toArray",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String"
                    ],
                    "name": "eventType",
                    "optional": false
                },
                {
                    "types": [
                        "EventDispatcher.Event",
                        "Object"
                    ],
                    "name": "event",
                    "optional": false,
                    "description": "If you use an Object the object is wrapped in an Event"
                },
                {
                    "types": null,
                    "name": "target",
                    "optional": false
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/EventDispatcher.js",
            "lineNumbers": [
                97,
                160
            ],
            "description": "Triggers a specific event and the * event\n",
            "definedBy": "js.core.EventDispatcher",
            "name": "trigger",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String"
                    ],
                    "name": "eventType",
                    "optional": false
                },
                {
                    "types": [
                        "Function"
                    ],
                    "name": "callback",
                    "optional": false
                },
                {
                    "name": "scope"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/EventDispatcher.js",
            "lineNumbers": [
                168,
                183
            ],
            "description": "Unbinds callbacks for events\n",
            "definedBy": "js.core.EventDispatcher",
            "name": "unbind",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String",
                        "Object"
                    ],
                    "name": "key",
                    "optional": false,
                    "description": "the attribute or attributes to unset"
                },
                {
                    "types": [
                        "Object"
                    ],
                    "name": "options",
                    "optional": true
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                894,
                897
            ],
            "description": "Unset attribute on $",
            "returns": {
                "types": [
                    "this"
                ]
            },
            "definedBy": "js.core.Bindable",
            "name": "unset",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": null,
                    "name": "item",
                    "optional": false
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/List.js",
            "lineNumbers": [
                67,
                71
            ],
            "description": "Adds item to first position of list",
            "definedBy": "js.core.List",
            "name": "unshift",
            "visibility": "public"
        }
    ],
    "staticMethods": [],
    "defaults": {},
    "properties": {
        "$modelFactory": {
            "name": "$modelFactory",
            "visibility": "private",
            "definedInFile": "js/data/Collection.js",
            "lineNumbers": [
                21,
                21
            ],
            "propertyType": "complex",
            "value": " Model",
            "description": "The model factory for creating items"
        },
        "isCollection": {
            "name": "isCollection",
            "visibility": "public",
            "definedInFile": "js/data/Collection.js",
            "lineNumbers": [
                23,
                23
            ],
            "value": "true",
            "propertyType": "value"
        }
    },
    "fqClassName": "js.data.Collection",
    "inherit": "js.core.List",
    "dependencies": [
        "flow",
        "js.core.List",
        "js.data.Model",
        "js.data.Query",
        "require",
        "underscore"
    ],
    "type": "js",
    "file": "js/data/Collection.js",
    "package": "js.data",
    "inheritancePath": [
        "js.core.List",
        "js.core.Bindable",
        "js.core.EventDispatcher",
        "js.core.Base"
    ]
}