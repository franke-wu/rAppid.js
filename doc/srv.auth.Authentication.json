{
    "methods": [
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/EventDispatcher.js",
            "lineNumbers": [
                201,
                203
            ],
            "definedBy": "js.core.EventDispatcher",
            "name": "_beforeDestroy",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                314,
                338
            ],
            "definedBy": "js.core.Bindable",
            "name": "_bindBus",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": null,
                    "name": "attribute",
                    "optional": false
                },
                {
                    "types": null,
                    "name": "key",
                    "optional": false
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                568,
                594
            ],
            "description": "Returns a copy of the attribute. This method is a hook for further cloning options",
            "private": "",
            "definedBy": "js.core.Bindable",
            "name": "_cloneAttribute",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "Object"
                    ],
                    "name": "attributes",
                    "optional": false,
                    "description": "contains the changed attributes"
                },
                {
                    "types": [
                        "Object"
                    ],
                    "name": "options",
                    "optional": false,
                    "description": "the options passed in the set method"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                862,
                864
            ],
            "description": "called after attributes has set and some of the has been changed\n",
            "abstract": "",
            "private": "",
            "definedBy": "js.core.Bindable",
            "name": "_commitChangedAttributes",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                756,
                759
            ],
            "definedBy": "js.core.Bindable",
            "name": "_commitInvalidatedAttributes",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/data/Entity.js",
            "lineNumbers": [
                425,
                433
            ],
            "definedBy": "js.data.Entity",
            "name": "_createDependentObjectCache",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "Function"
                    ],
                    "name": "fnc",
                    "optional": false
                },
                {
                    "types": [
                        "String"
                    ],
                    "name": "cacheId",
                    "optional": true
                },
                {
                    "types": [
                        "Number"
                    ],
                    "name": "delay",
                    "optional": true
                },
                {
                    "types": [
                        "Object"
                    ],
                    "name": "scope",
                    "optional": true
                },
                {
                    "types": [
                        "Array"
                    ],
                    "name": "parameters",
                    "optional": true
                },
                {
                    "types": [
                        "String"
                    ],
                    "name": "strategy",
                    "optional": true,
                    "defaultValue": "loop",
                    "description": "loop will trigger the function at least every delay, wait will clear the timeout"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Base.js",
            "lineNumbers": [
                84,
                118
            ],
            "description": "",
            "private": "",
            "definedBy": "js.core.Base",
            "name": "_debounceFunctionCall",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                600,
                602
            ],
            "description": "",
            "returns": {
                "types": [
                    "Object"
                ],
                "description": "returns the default attributes and includes the defaults from base classes"
            },
            "private": "",
            "definedBy": "js.core.Bindable",
            "name": "_defaultAttributes",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/EventDispatcher.js",
            "lineNumbers": [
                209,
                215
            ],
            "definedBy": "js.core.EventDispatcher",
            "name": "_destroyCompleted",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/data/Entity.js",
            "lineNumbers": [
                278,
                354
            ],
            "description": "Constructs the schema with the schema definition",
            "private": "",
            "definedBy": "js.data.Entity",
            "name": "_extendSchema",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/data/Entity.js",
            "lineNumbers": [
                245,
                271
            ],
            "definedBy": "js.data.Entity",
            "name": "_extendTransformers",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/data/Entity.js",
            "lineNumbers": [
                216,
                243
            ],
            "definedBy": "js.data.Entity",
            "name": "_extendValidators",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                364,
                378
            ],
            "definedBy": "js.core.Bindable",
            "name": "_extract",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String"
                    ],
                    "name": "property",
                    "optional": false,
                    "description": "the name of the static property used to find defaults"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                611,
                639
            ],
            "description": "generates a default chain containing the values from this instance and base classes\n",
            "returns": {
                "types": [
                    "*"
                ]
            },
            "private": "",
            "definedBy": "js.core.Bindable",
            "name": "_generateDefaultsChain",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "attributes"
                },
                {
                    "name": "search"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                866,
                875
            ],
            "definedBy": "js.core.Bindable",
            "name": "_hasAll",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "attributes"
                },
                {
                    "name": "search"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                877,
                886
            ],
            "definedBy": "js.core.Bindable",
            "name": "_hasSome",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                439,
                450
            ],
            "definedBy": "js.core.Bindable",
            "name": "_initializationComplete",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                216,
                226
            ],
            "description": "starts the initialization of the `Bindable` if it hasn't initialized yet.\n\nIt calls the following methods:\n\n* initialize();\n* _initializeBindings();\n",
            "private": "",
            "definedBy": "js.core.Bindable",
            "name": "_initialize",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                383,
                433
            ],
            "description": "Initialize all Binding and Event attributes",
            "definedBy": "js.core.Bindable",
            "name": "_initializeBindings",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                435,
                437
            ],
            "definedBy": "js.core.Bindable",
            "name": "_initializeBindingsBeforeComplete",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                201,
                204
            ],
            "description": "\ninvokes the `_initialize` method. This method is a hook function and is overwritten by js.core.Component\n",
            "private": "",
            "definedBy": "js.core.Bindable",
            "name": "_initializeFromCtor",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                276,
                311
            ],
            "definedBy": "js.core.Bindable",
            "name": "_inject",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                241,
                243
            ],
            "description": "\nreturns the chained object defining the required injections\n",
            "returns": {
                "types": [
                    "Object"
                ]
            },
            "private": "",
            "definedBy": "js.core.Bindable",
            "name": "_injectChain",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/EventDispatcher.js",
            "lineNumbers": [
                205,
                207
            ],
            "definedBy": "js.core.EventDispatcher",
            "name": "_innerDestroy",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "childFactory"
                }
            ],
            "annotations": {},
            "definedInFile": "js/data/Entity.js",
            "lineNumbers": [
                447,
                449
            ],
            "definedBy": "js.data.Entity",
            "name": "_isChildFactoryDependentObject",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                452,
                454
            ],
            "definedBy": "js.core.Bindable",
            "name": "_postConstruct",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                456,
                458
            ],
            "definedBy": "js.core.Bindable",
            "name": "_preDestroy",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "field"
                },
                {
                    "name": "error"
                }
            ],
            "annotations": {},
            "definedInFile": "js/data/Entity.js",
            "lineNumbers": [
                586,
                595
            ],
            "description": " TODO: combine _setError and _setErrors",
            "definedBy": "js.data.Entity",
            "name": "_setError",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "Array"
                    ],
                    "name": "errors",
                    "optional": false
                },
                {
                    "types": [
                        "Object"
                    ],
                    "name": "options",
                    "optional": false
                }
            ],
            "annotations": {},
            "definedInFile": "js/data/Entity.js",
            "lineNumbers": [
                603,
                629
            ],
            "description": "",
            "private": "",
            "definedBy": "js.data.Entity",
            "name": "_setErrors",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                258,
                261
            ],
            "description": "sets up the Bindable or Component. It will inject the required injections and\nalso will bind the application wide `MessageBus` to all methods annotated with the\n`.bus()` method annotation\n\nFor `Components` the setUp method is invoked automatically during the add of the Component.\nFor non `Components`\n\n",
            "private": "",
            "see": [
                "{js.core.MessageBus}"
            ],
            "definedBy": "js.core.Bindable",
            "name": "_setUp",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {
                "on": [
                    [
                        "this",
                        "change"
                    ]
                ]
            },
            "definedInFile": "js/data/Model.js",
            "lineNumbers": [
                311,
                317
            ],
            "description": "Returns CREATED if identifier() is set, NEW if identifier is null or undefined and DELETED if identifier is false.",
            "returns": {
                "types": [
                    "Boolean"
                ]
            },
            "definedBy": "js.data.Model",
            "name": "_status",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                271,
                274
            ],
            "description": "tears down the Bindable or Component. It will remove the injected variables and\nalso will unbind the annotated event handlers from the application wide `MessageBus`\n",
            "private": "",
            "see": [
                "{js.core.MessageBus}"
            ],
            "definedBy": "js.core.Bindable",
            "name": "_tearDown",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                340,
                362
            ],
            "definedBy": "js.core.Bindable",
            "name": "_unbindBus",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String"
                    ],
                    "name": "eventType",
                    "optional": false,
                    "description": "The name of the event"
                },
                {
                    "name": "callback"
                },
                {
                    "types": [
                        "Object"
                    ],
                    "name": "scope",
                    "optional": true,
                    "description": "This sets the scope for the callback function"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/EventDispatcher.js",
            "lineNumbers": [
                72,
                88
            ],
            "description": "Binds a callback and a scope to a given eventType\n",
            "definedBy": "js.core.EventDispatcher",
            "name": "bind",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                903,
                905
            ],
            "description": "Clears all attributes",
            "returns": {
                "types": [
                    "this"
                ]
            },
            "definedBy": "js.core.Bindable",
            "name": "clear",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/data/Entity.js",
            "lineNumbers": [
                482,
                485
            ],
            "description": "Clears all errors",
            "definedBy": "js.data.Entity",
            "name": "clearErrors",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "Object"
                    ],
                    "name": "options",
                    "optional": false
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                535,
                561
            ],
            "description": "This method returns a copy of the Object with all attributes on the $\n",
            "returns": {
                "types": [
                    "js.core.Bindable"
                ],
                "description": "a fresh copy of the Bindable"
            },
            "definedBy": "js.core.Bindable",
            "name": "clone",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String"
                    ],
                    "name": "action",
                    "optional": false,
                    "description": "\"create\", \"save\", \"update\" or \"delete\""
                },
                {
                    "types": [
                        "Object"
                    ],
                    "name": "options",
                    "optional": false
                }
            ],
            "annotations": {},
            "definedInFile": "js/data/Entity.js",
            "lineNumbers": [
                469,
                477
            ],
            "description": "Composes the data based on the schema.\nCan pe used to pre compose the data for the processor",
            "returns": {
                "types": [
                    "Object"
                ],
                "description": "all data that should be serialized"
            },
            "definedBy": "js.data.Entity",
            "name": "compose",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/data/Entity.js",
            "lineNumbers": [
                706,
                708
            ],
            "description": "Returns the context model if the context is set",
            "returns": {
                "types": [
                    "js.data.Entity"
                ]
            },
            "definedBy": "js.data.Entity",
            "name": "contextModel",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String"
                    ],
                    "name": "identifier",
                    "optional": false
                }
            ],
            "annotations": {},
            "definedInFile": "js/data/Model.js",
            "lineNumbers": [
                339,
                348
            ],
            "description": "Converts the identifier to the given type in the schema",
            "returns": {
                "types": [
                    "Number",
                    "String"
                ]
            },
            "definedBy": "js.data.Model",
            "name": "convertIdentifier",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "Function"
                    ],
                    "name": "childFactory",
                    "optional": false
                },
                {
                    "types": [
                        "String",
                        "Number"
                    ],
                    "name": "id",
                    "optional": true
                }
            ],
            "annotations": {},
            "definedInFile": "js/data/Entity.js",
            "lineNumbers": [
                441,
                445
            ],
            "description": "Creates an entity in the context of the given entity",
            "returns": {
                "types": [
                    "js.data.Entity"
                ]
            },
            "definedBy": "js.data.Entity",
            "name": "createEntity",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Base.js",
            "lineNumbers": [
                12,
                18
            ],
            "definedBy": "js.core.Base",
            "name": "ctor",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/EventDispatcher.js",
            "lineNumbers": [
                188,
                199
            ],
            "description": "Clears up the instance",
            "definedBy": "js.core.EventDispatcher",
            "name": "destroy",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Base.js",
            "lineNumbers": [
                41,
                43
            ],
            "description": "this is an empty function doing nothing. It can be used as fallback if a method requires a\ncallback function, which hasn't been passed.\n\n```\nfunction myFunction(callback) {\ncallback = callback || this.emptyCallback;\n}\n```\n",
            "returns": {
                "types": [
                    "Function"
                ],
                "description": "a function doing nothing"
            },
            "definedBy": "js.core.Base",
            "name": "emptyCallback",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String"
                    ],
                    "name": "field",
                    "optional": false,
                    "description": "the name of the field"
                }
            ],
            "annotations": {},
            "definedInFile": "js/data/Entity.js",
            "lineNumbers": [
                636,
                641
            ],
            "description": "Returns the error for a given field",
            "deprecated": "",
            "returns": {
                "types": [
                    "*"
                ]
            },
            "definedBy": "js.data.Entity",
            "name": "error",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {
                "on": [
                    [
                        "this",
                        "isValidChanged"
                    ]
                ]
            },
            "definedInFile": "js/data/Entity.js",
            "lineNumbers": [
                492,
                494
            ],
            "description": "Returns the errors of the entity",
            "returns": {
                "types": [
                    "js.core.Bindable"
                ]
            },
            "definedBy": "js.data.Entity",
            "name": "errors",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "Object"
                    ],
                    "name": "options",
                    "optional": false
                },
                {
                    "types": [
                        "Function"
                    ],
                    "name": "callback",
                    "optional": false,
                    "description": "function(err, model, options)"
                }
            ],
            "annotations": {},
            "definedInFile": "js/data/Model.js",
            "lineNumbers": [
                221,
                256
            ],
            "description": "Fetches the model over the given DataSource. The id of the model must be set.\n",
            "definedBy": "js.data.Model",
            "name": "fetch",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String"
                    ],
                    "name": "field",
                    "optional": false,
                    "description": "the name of the field"
                }
            ],
            "annotations": {
                "on": [
                    [
                        "this",
                        "isValidChanged"
                    ]
                ]
            },
            "definedInFile": "js/data/Entity.js",
            "lineNumbers": [
                501,
                503
            ],
            "description": "Returns the error for a given field",
            "returns": {
                "types": [
                    "*"
                ]
            },
            "definedBy": "js.data.Entity",
            "name": "fieldError",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "Object"
                    ],
                    "name": "scope",
                    "optional": true,
                    "defaultValue": "this",
                    "description": "the scope where the path is evaluated"
                },
                {
                    "types": [
                        "String"
                    ],
                    "name": "key",
                    "optional": false,
                    "description": "or path"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                768,
                842
            ],
            "description": "evaluates a path to retrieve a value\n",
            "returns": {
                "types": null,
                "description": "the value for the path or undefined"
            },
            "definedBy": "js.core.Bindable",
            "name": "get",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String"
                    ],
                    "name": "field",
                    "optional": false
                }
            ],
            "annotations": {},
            "definedInFile": "js/data/Model.js",
            "lineNumbers": [
                177,
                196
            ],
            "description": "Returns a sub collection of the model for a given field.\nIf the collection doesn't exist it gets created.\nYou should always use this method to get a sub collection.\n",
            "returns": {
                "types": [
                    "js.data.Collection"
                ]
            },
            "definedBy": "js.data.Model",
            "name": "getCollection",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "Function"
                    ],
                    "name": "childFactory",
                    "optional": false
                }
            ],
            "annotations": {},
            "definedInFile": "js/data/Entity.js",
            "lineNumbers": [
                361,
                381
            ],
            "description": "Returns the correct context for a child factory",
            "returns": {
                "types": [
                    "js.data.DataSource.Context"
                ]
            },
            "definedBy": "js.data.Entity",
            "name": "getContextForChild",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "fncName"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                475,
                488
            ],
            "definedBy": "js.core.Bindable",
            "name": "getScopeForFncName",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "key"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                460,
                473
            ],
            "definedBy": "js.core.Bindable",
            "name": "getScopeForKey",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String"
                    ],
                    "name": "key",
                    "optional": false
                },
                {
                    "types": [
                        "Object",
                        "js.core.Bindable"
                    ],
                    "name": "scope",
                    "optional": true
                }
            ],
            "annotations": {},
            "definedInFile": "js/data/Entity.js",
            "lineNumbers": [
                390,
                398
            ],
            "description": "Returns the transformed value of a field\n",
            "returns": {
                "types": [
                    "*"
                ]
            },
            "definedBy": "js.data.Entity",
            "name": "getTransformedValue",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String"
                    ],
                    "name": "path",
                    "optional": false,
                    "description": "to get the value"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                850,
                852
            ],
            "description": "determinate if a attribute is available\n",
            "returns": {
                "types": [
                    "Boolean"
                ],
                "description": "true if attribute is not undefined"
            },
            "definedBy": "js.core.Bindable",
            "name": "has",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/data/Entity.js",
            "lineNumbers": [
                699,
                701
            ],
            "description": "Returns the value of the idField",
            "returns": {
                "types": [
                    "*"
                ]
            },
            "definedBy": "js.data.Entity",
            "name": "identifier",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "callback",
                    "types": [
                        "Function"
                    ],
                    "optional": false
                }
            ],
            "annotations": {},
            "definedInFile": "srv/auth/Authentication.js",
            "lineNumbers": [
                39,
                56
            ],
            "definedBy": "js.data.Entity",
            "overwritesMethod": true,
            "name": "init",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                231,
                232
            ],
            "description": "the initialize method is a hook function to add a custom logic during the initiation process.",
            "definedBy": "js.core.Bindable",
            "name": "initialize",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {
                "on": [
                    [
                        "this",
                        "change"
                    ]
                ]
            },
            "definedInFile": "js/data/Model.js",
            "lineNumbers": [
                330,
                332
            ],
            "description": "Returns true if status is CREATED",
            "returns": {
                "types": [
                    "Boolean"
                ]
            },
            "definedBy": "js.data.Model",
            "name": "isCreated",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "b"
                },
                {
                    "name": "keys"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                995,
                1022
            ],
            "definedBy": "js.core.Bindable",
            "name": "isDeepEqual",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "b"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                1023,
                1025
            ],
            "definedBy": "js.core.Bindable",
            "name": "isEqual",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {
                "on": [
                    [
                        "this",
                        "change"
                    ]
                ]
            },
            "definedInFile": "js/data/Model.js",
            "lineNumbers": [
                322,
                324
            ],
            "description": "Returns true if status is NEW",
            "returns": {
                "types": [
                    "Boolean"
                ]
            },
            "definedBy": "js.data.Model",
            "name": "isNew",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {
                "on": [
                    [
                        "this",
                        "isValidChanged"
                    ]
                ]
            },
            "definedInFile": "js/data/Entity.js",
            "lineNumbers": [
                510,
                521
            ],
            "description": "Returns true if valid\n",
            "returns": {
                "types": [
                    "Boolean"
                ]
            },
            "definedBy": "js.data.Entity",
            "name": "isValid",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String",
                        "Array"
                    ],
                    "name": "message",
                    "optional": false,
                    "description": "the message to log"
                },
                {
                    "types": [
                        "String"
                    ],
                    "name": "level",
                    "optional": true,
                    "defaultValue": "\"info\"",
                    "description": "the service level of (debug, info, warn, error)"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Base.js",
            "lineNumbers": [
                51,
                72
            ],
            "description": "logs messages to configured logging functions\n",
            "definedBy": "js.core.Base",
            "name": "log",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "Object"
                    ],
                    "name": "data",
                    "optional": false,
                    "description": "the data parsed by the processor"
                },
                {
                    "types": [
                        "String"
                    ],
                    "name": "action",
                    "optional": true,
                    "description": "the action of the data source (\"create\", \"save\", \"update\" or \"delete\")"
                },
                {
                    "types": [
                        "String"
                    ],
                    "name": "options",
                    "optional": true,
                    "description": "some options"
                }
            ],
            "annotations": {},
            "definedInFile": "js/data/Entity.js",
            "lineNumbers": [
                458,
                460
            ],
            "description": "Parses the data. Can be overridden to change parsed data.\n",
            "definedBy": "js.data.Entity",
            "name": "parse",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "Object"
                    ],
                    "name": "options",
                    "optional": true,
                    "description": "options for remove action"
                },
                {
                    "types": [
                        "Function"
                    ],
                    "name": "callback",
                    "optional": false,
                    "description": "The callback"
                }
            ],
            "annotations": {},
            "definedInFile": "js/data/Model.js",
            "lineNumbers": [
                265,
                291
            ],
            "description": "Removes the model from the DataSource\nNote: This does NOT remove the model from the collection.\nThis should be done by invalidating the page cache of the collection\n",
            "definedBy": "js.data.Model",
            "name": "remove",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Base.js",
            "lineNumbers": [
                25,
                27
            ],
            "description": "determinate if the application runs in the browser or on node\n",
            "returns": {
                "types": [
                    "Boolean"
                ],
                "description": "true if the application runs in a browser"
            },
            "definedBy": "js.core.Base",
            "name": "runsInBrowser",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "Object"
                    ],
                    "name": "options",
                    "optional": false
                },
                {
                    "types": [
                        "Function"
                    ],
                    "name": "callback",
                    "optional": false,
                    "description": "The callback when save has finished"
                }
            ],
            "annotations": {},
            "definedInFile": "js/data/Model.js",
            "lineNumbers": [
                90,
                144
            ],
            "description": "\nPerstists the model over the DataSource in which it was created\n",
            "definedBy": "js.data.Model",
            "name": "save",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String"
                    ],
                    "name": "key",
                    "optional": false,
                    "description": "The attribute key"
                },
                {
                    "types": [
                        "String"
                    ],
                    "name": "value",
                    "optional": false,
                    "description": "The attribute value"
                },
                {
                    "types": [
                        "Object"
                    ],
                    "name": "options",
                    "optional": false,
                    "description": "A hash of options"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                651,
                738
            ],
            "description": "Sets new values for attributes and notify about changes\n",
            "returns": {
                "types": [
                    "js.core.Bindable"
                ],
                "description": "this"
            },
            "definedBy": "js.core.Bindable",
            "name": "set",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "key"
                },
                {
                    "name": "value"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                740,
                754
            ],
            "definedBy": "js.core.Bindable",
            "name": "setLater",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                500,
                528
            ],
            "description": "Writes attributes back to the source",
            "definedBy": "js.core.Bindable",
            "name": "sync",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": null,
                    "name": "fnc",
                    "optional": false,
                    "description": "the function to synchronize"
                },
                {
                    "types": null,
                    "name": "cacheId",
                    "optional": false,
                    "description": "the cacheId for the fnc call"
                },
                {
                    "types": null,
                    "name": "callback",
                    "optional": false,
                    "description": "the callback to be called in the fnc"
                },
                {
                    "types": null,
                    "name": "scope",
                    "optional": false,
                    "description": "the fnc scope"
                },
                {
                    "types": null,
                    "name": "clear",
                    "optional": false,
                    "description": "if you want to clear the cache after all callbacks are called"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Base.js",
            "lineNumbers": [
                127,
                167
            ],
            "description": "",
            "definedBy": "js.core.Base",
            "name": "synchronizeFunctionCall",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String"
                    ],
                    "name": "field",
                    "optional": false
                },
                {
                    "types": [
                        "Object"
                    ],
                    "name": "options",
                    "optional": true
                }
            ],
            "annotations": {},
            "definedInFile": "js/data/Entity.js",
            "lineNumbers": [
                406,
                408
            ],
            "description": "Transforms one value and sets it on the entity\n",
            "definedBy": "js.data.Entity",
            "name": "transformValue",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "Object"
                    ],
                    "name": "options",
                    "optional": true
                }
            ],
            "annotations": {},
            "definedInFile": "js/data/Entity.js",
            "lineNumbers": [
                414,
                423
            ],
            "description": "Transforms all values defined in the schema",
            "definedBy": "js.data.Entity",
            "name": "transformValues",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String"
                    ],
                    "name": "eventType",
                    "optional": false
                },
                {
                    "types": [
                        "EventDispatcher.Event",
                        "Object"
                    ],
                    "name": "event",
                    "optional": false,
                    "description": "If you use an Object the object is wrapped in an Event"
                },
                {
                    "types": null,
                    "name": "target",
                    "optional": false
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/EventDispatcher.js",
            "lineNumbers": [
                97,
                160
            ],
            "description": "Triggers a specific event and the * event\n",
            "definedBy": "js.core.EventDispatcher",
            "name": "trigger",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String"
                    ],
                    "name": "eventType",
                    "optional": false
                },
                {
                    "types": [
                        "Function"
                    ],
                    "name": "callback",
                    "optional": false
                },
                {
                    "name": "scope"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/EventDispatcher.js",
            "lineNumbers": [
                168,
                183
            ],
            "description": "Unbinds callbacks for events\n",
            "definedBy": "js.core.EventDispatcher",
            "name": "unbind",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String",
                        "Object"
                    ],
                    "name": "key",
                    "optional": false,
                    "description": "the attribute or attributes to unset"
                },
                {
                    "types": [
                        "Object"
                    ],
                    "name": "options",
                    "optional": true
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                894,
                897
            ],
            "description": "Unset attribute on $",
            "returns": {
                "types": [
                    "this"
                ]
            },
            "definedBy": "js.core.Bindable",
            "name": "unset",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "Object"
                    ],
                    "name": "options",
                    "optional": true
                },
                {
                    "types": [
                        "Function"
                    ],
                    "name": "callback",
                    "optional": true
                }
            ],
            "annotations": {},
            "definedInFile": "js/data/Entity.js",
            "lineNumbers": [
                533,
                583
            ],
            "description": "Validates the entity.\nIf there are asynchronous validators applied use the callback to get notified when validation has finished.\n",
            "definedBy": "js.data.Entity",
            "name": "validate",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "Object"
                    ],
                    "name": "options",
                    "optional": false,
                    "description": "options for validation and saving"
                },
                {
                    "types": [
                        "Function"
                    ],
                    "name": "callback",
                    "optional": false
                }
            ],
            "annotations": {},
            "definedInFile": "js/data/Model.js",
            "lineNumbers": [
                151,
                168
            ],
            "description": "Validates the model before saving. If the model is valid it gets saved otherwise it returns an error in the callback.\n",
            "definedBy": "js.data.Model",
            "name": "validateAndSave",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "js.data.Entity"
                    ],
                    "name": "entity",
                    "optional": false
                },
                {
                    "types": [
                        "Object"
                    ],
                    "name": "options",
                    "optional": false
                },
                {
                    "types": [
                        "Function"
                    ],
                    "name": "callback",
                    "optional": false
                }
            ],
            "annotations": {},
            "definedInFile": "js/data/Entity.js",
            "lineNumbers": [
                648,
                654
            ],
            "description": "Validates a sub entity",
            "definedBy": "js.data.Entity",
            "name": "validateSubEntity",
            "visibility": "public"
        }
    ],
    "staticMethods": [],
    "defaults": {
        "identity": {
            "name": "identity",
            "defaultType": "value",
            "visibility": "public",
            "value": null,
            "lineNumbers": [
                30,
                30
            ]
        }
    },
    "properties": {
        "idField": {
            "name": "idField",
            "visibility": "public",
            "definedInFile": "srv/auth/Authentication.js",
            "lineNumbers": [
                37,
                37
            ],
            "value": "\"token\"",
            "propertyType": "value",
            "definedBy": "js.data.Entity",
            "overwrites": true
        },
        "hrefField": {
            "name": "hrefField",
            "visibility": "public",
            "definedInFile": "js/data/Model.js",
            "lineNumbers": [
                52,
                52
            ],
            "value": "\"href\"",
            "propertyType": "value",
            "description": "The field which will contain the href",
            "types": [
                "String"
            ],
            "definedBy": "js.data.Model"
        },
        "updatedField": {
            "name": "updatedField",
            "visibility": "public",
            "definedInFile": "js/data/Entity.js",
            "lineNumbers": [
                205,
                205
            ],
            "value": "false",
            "propertyType": "value",
            "description": "The updated field. Is automatically added to the schema with Date",
            "definedBy": "js.data.Entity"
        },
        "createdField": {
            "name": "createdField",
            "visibility": "public",
            "definedInFile": "js/data/Entity.js",
            "lineNumbers": [
                200,
                200
            ],
            "value": "false",
            "propertyType": "value",
            "description": "The created field. Is automatically added to the schema with Date",
            "definedBy": "js.data.Entity"
        },
        "resultType": {
            "name": "resultType",
            "visibility": "public",
            "definedInFile": "js/data/Model.js",
            "lineNumbers": [
                70,
                70
            ],
            "value": "null",
            "propertyType": "value",
            "description": "This field defines the type / class which should be used for the http response after a post returns with payload\nThe default is null",
            "types": [
                "Function"
            ],
            "definedBy": "js.data.Model"
        },
        "$isEntity": {
            "name": "$isEntity",
            "visibility": "private",
            "definedInFile": "js/data/Entity.js",
            "lineNumbers": [
                213,
                213
            ],
            "value": "true",
            "propertyType": "value",
            "description": " TODO: merge this together",
            "definedBy": "js.data.Entity"
        },
        "$isDependentObject": {
            "name": "$isDependentObject",
            "visibility": "private",
            "definedInFile": "js/data/Entity.js",
            "lineNumbers": [
                214,
                214
            ],
            "value": "true",
            "propertyType": "value",
            "definedBy": "js.data.Entity"
        },
        "validators": {
            "name": "validators",
            "visibility": "public",
            "definedInFile": "js/data/Entity.js",
            "lineNumbers": [
                187,
                189
            ],
            "propertyType": "complex",
            "value": " [\n                new SchemaValidator()\n            ]",
            "description": "An array of validators to apply",
            "definedBy": "js.data.Entity"
        },
        "transformers": {
            "name": "transformers",
            "visibility": "public",
            "definedInFile": "js/data/Entity.js",
            "lineNumbers": [
                192,
                192
            ],
            "propertyType": "complex",
            "value": " []",
            "description": " An Array of field transformers",
            "definedBy": "js.data.Entity"
        },
        "$context": {
            "name": "$context",
            "visibility": "private",
            "definedInFile": "js/data/Entity.js",
            "lineNumbers": [
                209,
                209
            ],
            "value": "null",
            "propertyType": "value",
            "description": "The context of the entity",
            "definedBy": "js.data.Entity"
        },
        "$dependentObjectContext": {
            "name": "$dependentObjectContext",
            "visibility": "private",
            "definedInFile": "js/data/Entity.js",
            "lineNumbers": [
                210,
                210
            ],
            "value": "null",
            "propertyType": "value",
            "definedBy": "js.data.Entity"
        }
    },
    "fqClassName": "srv.auth.Authentication",
    "inherit": "js.data.Model",
    "dependencies": [
        "js.data.Model",
        "srv.core.IdentityService"
    ],
    "description": "\nAuthentication saves information about the authentication\n",
    "type": "js",
    "file": "srv/auth/Authentication.js",
    "package": "srv.auth",
    "inheritancePath": [
        "js.data.Model",
        "js.data.Entity",
        "js.core.Bindable",
        "js.core.EventDispatcher",
        "js.core.Base"
    ]
}